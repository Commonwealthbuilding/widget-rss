!function(t,e){function n(t,e,n){var i=t.children(),o=!1;t.empty();for(var s=0,a=i.length;a>s;s++){var l=i.eq(s);if(t.append(l),n&&t.append(n),r(t,e)){l.remove(),o=!0;break}n&&n.detach()}return o}function i(e,n,s,a,l){var d=!1,u="a, table, thead, tbody, tfoot, tr, col, colgroup, object, embed, param, ol, ul, dl, blockquote, select, optgroup, option, textarea, script, style",c="script, .dotdotdot-keep";return e.contents().detach().each(function(){var f=this,h=t(f);if("undefined"==typeof f)return!0;if(h.is(c))e.append(h);else{if(d)return!0;e.append(h),!l||h.is(a.after)||h.find(a.after).length||e[e.is(u)?"after":"append"](l),r(s,a)&&(d=3==f.nodeType?o(h,n,s,a,l):i(h,n,s,a,l)),d||l&&l.detach()}}),n.addClass("is-truncated"),d}function o(e,n,i,o,a){var u=e[0];if(!u)return!1;var f=d(u),h=-1!==f.indexOf(" ")?" ":"　",g="letter"==o.wrap?"":h,p=f.split(g),m=-1,y=-1,S=0,v=p.length-1;for(o.fallbackToLetter&&0==S&&0==v&&(g="",p=f.split(g),v=p.length-1);v>=S&&(0!=S||0!=v);){var w=Math.floor((S+v)/2);if(w==y)break;y=w,l(u,p.slice(0,y+1).join(g)+o.ellipsis),i.children().each(function(){t(this).toggle().toggle()}),r(i,o)?(v=y,o.fallbackToLetter&&0==S&&0==v&&(g="",p=p[0].split(g),m=-1,y=-1,S=0,v=p.length-1)):(m=y,S=y)}if(-1==m||1==p.length&&0==p[0].length){var R=e.parent();e.detach();var C=a&&a.closest(R).length?a.length:0;R.contents().length>C?u=c(R.contents().eq(-1-C),n):(u=c(R,n,!0),C||R.detach()),u&&(f=s(d(u),o),l(u,f),C&&a&&t(u).parent().append(a))}else f=s(p.slice(0,m+1).join(g),o),l(u,f);return!0}function r(t,e){return t.innerHeight()>e.maxHeight}function s(e,n){for(;t.inArray(e.slice(-1),n.lastCharacter.remove)>-1;)e=e.slice(0,-1);return t.inArray(e.slice(-1),n.lastCharacter.noEllipsis)<0&&(e+=n.ellipsis),e}function a(t){return{width:t.innerWidth(),height:t.innerHeight()}}function l(t,e){t.innerText?t.innerText=e:t.nodeValue?t.nodeValue=e:t.textContent&&(t.textContent=e)}function d(t){return t.innerText?t.innerText:t.nodeValue?t.nodeValue:t.textContent?t.textContent:""}function u(t){do t=t.previousSibling;while(t&&1!==t.nodeType&&3!==t.nodeType);return t}function c(e,n,i){var o,r=e&&e[0];if(r){if(!i){if(3===r.nodeType)return r;if(t.trim(e.text()))return c(e.contents().last(),n)}for(o=u(r);!o;){if(e=e.parent(),e.is(n)||!e.length)return!1;o=u(e[0])}if(o)return c(t(o),n)}return!1}function f(e,n){return e?"string"==typeof e?(e=t(e,n),e.length?e:!1):e.jquery?e:!1:!1}function h(t){for(var e=t.innerHeight(),n=["paddingTop","paddingBottom"],i=0,o=n.length;o>i;i++){var r=parseInt(t.css(n[i]),10);isNaN(r)&&(r=0),e-=r}return e}if(!t.fn.dotdotdot){t.fn.dotdotdot=function(e){if(0==this.length)return t.fn.dotdotdot.debug('No element found for "'+this.selector+'".'),this;if(this.length>1)return this.each(function(){t(this).dotdotdot(e)});var o=this,s=o.contents();o.data("dotdotdot")&&o.trigger("destroy.dot"),o.data("dotdotdot-style",o.attr("style")||""),o.css("word-wrap","break-word"),"nowrap"===o.css("white-space")&&o.css("white-space","normal"),o.bind_events=function(){return o.bind("update.dot",function(e,a){switch(o.removeClass("is-truncated"),e.preventDefault(),e.stopPropagation(),typeof l.height){case"number":l.maxHeight=l.height;break;case"function":l.maxHeight=l.height.call(o[0]);break;default:l.maxHeight=h(o)}l.maxHeight+=l.tolerance,"undefined"!=typeof a&&(("string"==typeof a||"nodeType"in a&&1===a.nodeType)&&(a=t("<div />").append(a).contents()),a instanceof t&&(s=a)),p=o.wrapInner('<div class="dotdotdot" />').children(),p.contents().detach().end().append(s.clone(!0)).find("br").replaceWith("  <br />  ").end().css({height:"auto",width:"auto",border:"none",padding:0,margin:0});var u=!1,c=!1;return d.afterElement&&(u=d.afterElement.clone(!0),u.show(),d.afterElement.detach()),r(p,l)&&(c="children"==l.wrap?n(p,l,u):i(p,o,p,l,u)),p.replaceWith(p.contents()),p=null,t.isFunction(l.callback)&&l.callback.call(o[0],c,s),d.isTruncated=c,c}).bind("isTruncated.dot",function(t,e){return t.preventDefault(),t.stopPropagation(),"function"==typeof e&&e.call(o[0],d.isTruncated),d.isTruncated}).bind("originalContent.dot",function(t,e){return t.preventDefault(),t.stopPropagation(),"function"==typeof e&&e.call(o[0],s),s}).bind("destroy.dot",function(t){t.preventDefault(),t.stopPropagation(),o.unwatch().unbind_events().contents().detach().end().append(s).attr("style",o.data("dotdotdot-style")||"").removeClass("is-truncated").data("dotdotdot",!1)}),o},o.unbind_events=function(){return o.unbind(".dot"),o},o.watch=function(){if(o.unwatch(),"window"==l.watch){var e=t(window),n=e.width(),i=e.height();e.bind("resize.dot"+d.dotId,function(){n==e.width()&&i==e.height()&&l.windowResizeFix||(n=e.width(),i=e.height(),c&&clearInterval(c),c=setTimeout(function(){o.trigger("update.dot")},100))})}else u=a(o),c=setInterval(function(){if(o.is(":visible")){var t=a(o);(u.width!=t.width||u.height!=t.height)&&(o.trigger("update.dot"),u=t)}},500);return o},o.unwatch=function(){return t(window).unbind("resize.dot"+d.dotId),c&&clearInterval(c),o};var l=t.extend(!0,{},t.fn.dotdotdot.defaults,e),d={},u={},c=null,p=null;return l.lastCharacter.remove instanceof Array||(l.lastCharacter.remove=t.fn.dotdotdot.defaultArrays.lastCharacter.remove),l.lastCharacter.noEllipsis instanceof Array||(l.lastCharacter.noEllipsis=t.fn.dotdotdot.defaultArrays.lastCharacter.noEllipsis),d.afterElement=f(l.after,o),d.isTruncated=!1,d.dotId=g++,o.data("dotdotdot",!0).bind_events().trigger("update.dot"),l.watch&&o.watch(),o},t.fn.dotdotdot.defaults={ellipsis:"... ",wrap:"word",fallbackToLetter:!0,lastCharacter:{},tolerance:0,callback:null,after:null,height:null,watch:!1,windowResizeFix:!0},t.fn.dotdotdot.defaultArrays={lastCharacter:{remove:[" ","　",",",";",".","!","?"],noEllipsis:[]}},t.fn.dotdotdot.debug=function(){};var g=1,p=t.fn.html;t.fn.html=function(n){return n!=e&&!t.isFunction(n)&&this.data("dotdotdot")?this.trigger("update",[n]):p.apply(this,arguments)};var m=t.fn.text;t.fn.text=function(n){return n!=e&&!t.isFunction(n)&&this.data("dotdotdot")?(n=t("<div />").text(n).html(),this.trigger("update",[n])):m.apply(this,arguments)}}}(jQuery),jQuery(document).ready(function(t){t(".dot-ellipsis").each(function(){var e=t(this).hasClass("dot-resize-update"),n=t(this).hasClass("dot-timer-update"),i=0,o=t(this).attr("class").split(/\s+/);t.each(o,function(t,e){var n=e.match(/^dot-height-(\d+)$/);null!==n&&(i=Number(n[1]))});var r=new Object;n&&(r.watch=!0),e&&(r.watch="window"),i>0&&(r.height=i),t(this).dotdotdot(r)})}),jQuery(window).load(function(){jQuery(".dot-ellipsis.dot-load-update").trigger("update.dot")});var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function t(t,e){var n="font-family:"+e.font.family+"; ",i="color: "+(e.color?e.color:e.forecolor)+"; ",o="font-size: "+(-1===e.size.indexOf("px")?e.size+"px; ":e.size+"; "),r="font-weight: "+(e.bold?"bold":"normal")+"; ",s="font-style: "+(e.italic?"italic":"normal")+"; ",a="text-decoration: "+(e.underline?"underline":"none")+"; ",l="background-color: "+(e.highlightColor?e.highlightColor:e.backcolor)+"; ";return"."+t+" {"+n+i+o+r+s+a+l+"}"}function e(t){for(var e=document.createElement("style"),n=0,i=t.length;i>n;n++)e.appendChild(document.createTextNode(t[n]));document.head.appendChild(e)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&e([t(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&o(n.fontSetting.font.family,r))})}function i(t,e,n){var i=null,o="font-family: "+t+"; src: url('"+e+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",o)}function o(t,e){var n,i=document.createElement("link");e=e||document,i.setAttribute("rel","stylesheet"),i.setAttribute("type","text/css"),n=t.split(",")[0],n=n.replace(/'/g,""),i.setAttribute("href","https://fonts.googleapis.com/css?family="+n),null!==i&&e.getElementsByTagName("head")[0].appendChild(i)}function r(t){for(var e=t.length,n=[],i=0;e>i;i++)n[i]=new Image,n[i].src=t[i]}function s(t){for(var e,n=window.location.search.substring(1),i=n.split("&"),o=0;o<i.length;o++)if(e=i[o].split("="),e[0]==t)return decodeURIComponent(e[1]);return""}function a(t){var e="";switch(t){case 404:e="The file does not exist or cannot be accessed.";break;case 507:e="There is not enough disk space to save the file on Rise Cache.";break;default:e="There was a problem retrieving the file from Rise Cache."}return e}return{getQueryParameter:s,getFontCssStyle:t,addCSSRules:e,loadFonts:n,loadCustomFont:i,loadGoogleFont:o,preloadImages:r,getRiseCacheErrorMessage:a}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function t(t,e){var i=null;t.event?(i=t,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=s,e(i)):e(i)}function e(){var t=new Date,e=t.getUTCFullYear(),n=t.getUTCMonth()+1,i=t.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),e+n+i}function n(t){var e,n=/[?#&]/;return t&&"string"==typeof t?(e=t.substr(t.lastIndexOf(".")+1),n.test(e)&&(e=e.substr(0,-1!==e.indexOf("?")?e.indexOf("?"):e.length),e=e.substr(0,-1!==e.indexOf("#")?e.indexOf("#"):e.length),e=e.substr(0,-1!==e.indexOf("&")?e.indexOf("&"):e.length)),e.toLowerCase()):null}function i(t){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:e(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(t)),i.rows[0].json.ts=(new Date).toISOString(),i}function o(e,n){t(n,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}function r(t,e){a=t,s=e}var s="",a="";return{getInsertData:i,getFileFormat:n,logEvent:o,setIds:r}}(),RiseVision.Common.Logger=function(t){"use strict";function e(t){var e=new XMLHttpRequest;return new Date-d<358e4?t({}):(e.open("POST",o,!0),e.onloadend=function(){var n=JSON.parse(e.response);t({token:n.access_token,refreshedAt:new Date})},e.send(),void 0)}function n(t){return s&&l===t}function i(i,o){function c(e){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",i),d=e.refreshedAt||d,u=e.token||u,n=t.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),e(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,u="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.RSS={},RiseVision.RSS=function(t,e){"use strict";function n(){e.rpc.call("","rsevent_ready",null,w.getString("id"),!0,!0,!0,!0,!0)}function i(){e.rpc.call("","rsevent_done",null,w.getString("id")),null!==V&&u(V,!0),u({event:"done",feed_url:v.url},!1)}function o(){var t={event:"error",event_details:"no feed items",feed_url:v.url};u(t,!0),y("There are no items to show from this RSS feed.")}function r(){clearTimeout(E),E=null}function s(){r(),E=setTimeout(function(){i()},5e3)}function a(){R=new RiseVision.Common.Message(t.getElementById("container"),t.getElementById("messageContainer")),R.show("Please wait while your feed is loaded.");var e=[{"class":"story_font-style",fontSetting:v.story.fontStyle}];v.headline&&!_.isEmpty(v.headline.fontStyle)&&e.push({"class":"headline_font-style",fontSetting:v.headline.fontStyle}),v.timestamp&&!_.isEmpty(v.timestamp.fontStyle)&&e.push({"class":"timestamp_font-style",fontSetting:v.timestamp.fontStyle}),v.author&&!_.isEmpty(v.author.fontStyle)&&e.push({"class":"author_font-style",fontSetting:v.author.fontStyle}),RiseVision.Common.Utilities.loadFonts(e),C=new RiseVision.RSS.RiseRSS(v),C.init(),n()}function l(){var e=window.location.pathname,i=e.lastIndexOf("/")+1,o="";o="undefined"==typeof v.layout?"layout-4x1":v.layout,e=e.substr(0,i)+"layouts/"+o+".html",$.get(e).done(function(t){$("#container").append(t),a()}).fail(function(){R=new RiseVision.Common.Message(t.getElementById("container"),t.getElementById("messageContainer")),R.show("The layout file could not be loaded."),u({event:"error",event_details:"layout not loaded",error_details:e,feed_url:v.url},!0),n()})}function d(){return"rss_events"}function u(t,e){e&&(V=t),RiseVision.Common.LoggerUtils.logEvent(d(),t)}function c(){i()}function f(t){I=new RiseVision.RSS.Content(w,v),t.items&&t.items.length>0?(R.hide(),T=_.clone(t),I.init(T),b||I.play()):o()}function h(t){var e=!1;if(t.items&&0!==t.items.length)if(T&&t.items.length===T.items.length){for(var n=0;n<T.items.length;n+=1)if(!_.isEqual(t.items[n],T.items[n])){e=!0;break}}else e=!0;else o();e&&(T=_.clone(t),x?(I||(I=new RiseVision.RSS.Content(w,v)),R.hide(),I.init(T),x=!1,V=null):I.update(t))}function g(){return b=!0,x?(r(),void 0):(I&&I.pause(),void 0)}function p(){return b=!1,u({event:"play",feed_url:v.url},!1),x?(s(),void 0):(I&&I.play(),void 0)}function m(n){v=JSON.parse(JSON.stringify(n)),w=new e.Prefs,v.width=w.getInt("rsW"),v.height=w.getInt("rsH"),t.getElementById("container").style.width=v.width+"px",t.getElementById("container").style.height=v.height+"px",l()}function y(t){x=!0,I.reset(),T=null,R.show(t),b||s()}function S(){g()}var v=null,w=new e.Prefs,R=null,C=null,I=null,T=null,b=!0,E=null,V=null,x=!1;return{getTableName:d,logEvent:u,onContentDone:c,onRiseRSSInit:f,onRiseRSSRefresh:h,pause:g,play:p,setAdditionalParams:m,showError:y,stop:S}}(document,gadgets);var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Utils=function(){"use strict";function t(t){var e,n,i=document.createElement("div");for(i.innerHTML=t,e=i.getElementsByTagName("script"),n=e.length;n--;)e[n].parentNode.removeChild(e[n]);return i.innerHTML}function e(t){var e=120;return t.length>e&&(t=t.substring(0,e),t=t.replace(/\w+$/,""),t+=" ..."),t}return{stripScripts:t,truncate:e}}();var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Images={},RiseVision.RSS.Images=function(){"use strict";function t(t){a.push(t),s+=1,s===r.length&&l&&"function"==typeof l&&l()}function e(e){var n=new Image;n.onload=function(){t(this)},n.onerror=function(){t(this)},n.src=e}function n(){var n;for(n=0;n<r.length;n+=1)null===r[n]?t(null):e(r[n])}function i(t,e){t.length>0?(r=t,a=[],s=0,e&&(l=e),n()):e&&"function"==typeof e&&e()}function o(){return a}var r=[],s=0,a=[],l=null;return{getImages:o,load:i}}();var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.RiseRSS=function(t){"use strict";function e(){var e=document.querySelector("rise-rss");e.addEventListener("rise-rss-response",function(t){t.detail&&t.detail.feed&&(n?(n=!1,RiseVision.RSS.onRiseRSSInit(t.detail.feed)):RiseVision.RSS.onRiseRSSRefresh(t.detail.feed))}),e.addEventListener("rise-rss-error",function(e){var n="";e.detail&&"string"==typeof e.detail?n=e.detail:e.detail&&Array.isArray(e.detail)&&e.detail.length>0&&(n=e.detail[0]);var i={event:"error",event_details:"rise rss error",error_details:n,feed_url:t.url};RiseVision.RSS.logEvent(i,!0),RiseVision.RSS.showError("Sorry, there was a problem with the RSS feed.",!0)}),e.setAttribute("url",t.url),t.itemsInQueue&&e.setAttribute("entries",t.itemsInQueue),e.go()}var n=!0;return{init:e}};var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Content=function(t,e){"use strict";function n(){b={page:$(".page")}}function i(){var n=E.length<=e.itemsToShow?E.length:e.itemsToShow;return e.separator&&e.separator.show?t.getInt("rsH")/n-e.separator.size:t.getInt("rsH")/n}function o(t){var n={};return t+e.itemsToShow>=E.length-1?(n.itemsToShow=E.length-(t+1),n.currentItemIndex=E.length-1):(n.itemsToShow=e.itemsToShow,n.currentItemIndex=t+e.itemsToShow),n}function r(){var t={};return E.length<=e.itemsToShow?(t.itemsToShow=E.length,t.currentItemIndex=E.length-1):(t.itemsToShow=e.itemsToShow,t.currentItemIndex=e.itemsToShow-1),t}function s(t){var e=null;return _.has(t,"description")&&(e=t.description),e}function a(t){var e=null;return t.author?e=t.author:_.has(t,"dc:creator")&&(e=t["dc:creator"]["#"]),e}function l(t){var e=null;return t.image&&t.image.url?e=t.image.url:_.has(t,"enclosures")&&t.enclosures[0]&&_.contains(N,t.enclosures[0].type)&&(e=t.enclosures[0].url),e}function d(){for(var t=[],e=0;e<E.length;e+=1)t.push(l(E[e]));return t}function u(t){var e=t.date,n=null;if(e){e=new Date(e);var i={year:"numeric",month:"long",day:"numeric"};n=e.toLocaleDateString("en-us",i)}return n}function c(n,i){var o,r,s,a=null,l=parseInt(n.css("padding-left"),10)+parseInt(n.css("padding-right"),10),d=parseInt(n.css("padding-top"),10)+parseInt(n.css("padding-bottom"),10);switch(e.layout){case"layout-4x1":a={},a.width=.33*t.getString("rsW"),a.height=t.getString("rsH")/e.itemsToShow-d;break;case"layout-2x1":a={},a.width=0===$(i).find(".story").length?t.getString("rsW")-l:.5*t.getString("rsW"),a.height=t.getString("rsH")/e.itemsToShow-$(i).find(".textWrapper").outerHeight(!0)-d;break;case"layout-16x9":a={},a.width=t.getString("rsW")-l,a.height=t.getString("rsH")/e.itemsToShow-d;break;case"layout-1x2":a={},a.width=t.getString("rsW")-l,a.height=(t.getString("rsH")/e.itemsToShow-d)/2}return a&&(o=a.width/parseInt(n.width()),r=a.height/parseInt(n.height()),s=r>o?o:r,a.width=parseInt(parseInt(n.width())*s),a.height=parseInt(parseInt(n.height())*s)),a}function f(t,n){var i,o,r,d=s(t),c=a(t),f=l(t),h=u(t),g=document.querySelector("#layout").content,p=$(g.cloneNode(!0));!t.title||"undefined"!=typeof e.dataSelection.showTitle&&!e.dataSelection.showTitle?p.find(".headline").remove():(p.find(".headline").css("textAlign",e.headline.fontStyle.align),p.find(".headline a").text(V.stripScripts(t.title)));var m=!1;return!h||"undefined"!=typeof e.dataSelection.showTimestamp&&!e.dataSelection.showTimestamp?(m=!0,p.find(".timestamp").remove()):(e.timestamp&&p.find(".timestamp").css("textAlign",e.timestamp.fontStyle.align),p.find(".timestamp").text(h)),!c||"undefined"!=typeof e.dataSelection.showAuthor&&!e.dataSelection.showAuthor?(m=!0,p.find(".author").remove()):(e.author&&p.find(".author").css("textAlign",e.author.fontStyle.align),p.find(".author").text(c)),m&&p.find(".separator").remove(),!f||"undefined"!=typeof e.dataSelection.showImage&&!e.dataSelection.showImage?p.find(".image").remove():(r=x.getImages()[n],r&&p.find(".image").attr("src",f)),d?(i=p.find(".story"),i.css("textAlign",e.story.fontStyle.align),d=V.stripScripts(d),"snippet"===e.dataSelection.showDescription?i.html(V.truncate($("<div/>").html(d).text())):i.html(d),i.find("p").addClass("story_font-style"),i.find("div").addClass("story_font-style"),i.find("span").addClass("story_font-style")):p.remove(".story"),o=$(document.importNode(p[0],!0))}function h(){$(".item").each(function(){var t=$(this).find(".image"),e=null;t&&(e=c(t,this),e&&(t.width(e.width),t.height(e.height)))})}function g(t){"fade"===k.type?($(".item").one("transitionend",function(){p(t)}),$(".item").addClass("fade-out").removeClass("fade-in")):p(t)}function p(t){b.page.empty(),t&&"function"==typeof t&&t()}function m(t){b.page.append(f(E[t],t)),h(),e.separator&&e.separator.show&&$(".item").css("border-bottom","solid "+e.separator.size+"px "+e.separator.color),$(".item").height(i()),"fade"===k.type&&$(".item").addClass("fade-in"),$(".item").removeClass("hide"),"layout-16x9"!==e.layout&&$(".item").dotdotdot({height:i()})}function y(){var t,e=r(),n=o(O);return O===E.length-1?(v(),g(function(){for(var t=0;t<e.itemsToShow;t+=1)m(t);O=e.currentItemIndex,RiseVision.RSS.onContentDone()}),L=!1,void 0):(L?(L=!1,x.load(d(),function(){g(function(){for(var t=0;t<e.itemsToShow;t+=1)m(t);O=e.currentItemIndex})})):(t=O+1,O=n.currentItemIndex,g(function(){for(var e=t;e<t+n.itemsToShow;e+=1)m(e)})),void 0)}function S(){null===A&&(A=setInterval(function(){y()},k.duration))}function v(){clearInterval(A),A=null}function w(t){var n;E=t.items,e.transition&&(k=e.transition),n=r(),O=n.currentItemIndex,x.load(d(),function(){for(var t=0;t<n.itemsToShow;t+=1)m(t)})}function R(){v()}function C(){v(),g(),E=[]}function I(){S()}function T(t){E=t.items,L=!0}var b,E=[],V=RiseVision.RSS.Utils,x=RiseVision.RSS.Images,O=0,A=null,k={type:"none",duration:1e4},L=!1,N=["image/bmp","image/gif","image/jpeg","image/jpg","image/png","image/tiff"];return n(),{init:w,pause:R,play:I,reset:C,update:T}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(t,e){"use strict";function n(){try{e.style.height=t.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;e.firstChild;)e.removeChild(e.firstChild);e.style.display="none",t.style.visibility="visible",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=e.querySelector(".message"),i.innerHTML=n):(t.style.visibility="hidden",e.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),e.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(t,e,n){"use strict";function i(t,e){var n,i="",o="";Array.isArray(t)&&t.length>0&&Array.isArray(e)&&e.length>0&&("companyId"===t[0]&&(i=e[0]),"displayId"===t[1]&&(o=e[1]?e[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,o),"additionalParams"===t[2]&&(n=JSON.parse(e[2]),RiseVision.RSS.setAdditionalParams(n)))}function o(){RiseVision.RSS.play()}function r(){RiseVision.RSS.pause()}function s(){RiseVision.RSS.stop()}function a(){t.removeEventListener("WebComponentsReady",a),d&&""!==d&&(n.rpc.register("rscmd_play_"+d,o),n.rpc.register("rscmd_pause_"+d,r),n.rpc.register("rscmd_stop_"+d,s),n.rpc.register("rsparam_set_"+d,i),n.rpc.call("","rsparam_get",null,d,["companyId","displayId","additionalParams"]))}var l=new n.Prefs,d=l.getString("id");t.oncontextmenu=function(){return!1},e.body.onmousedown=function(){return!1},t.addEventListener("WebComponentsReady",a)}(window,document,gadgets);
//# sourceMappingURL=data:application/json;base64,
