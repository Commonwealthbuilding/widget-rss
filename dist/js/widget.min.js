"undefined"!=typeof angular&&(angular.module("risevision.widget.rss.config",[]).value("layout4x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-4x1.html").value("layout2x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-2x1.html").value("layout1x2","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-1x2.html"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"));var config={};!function(e,t,n,i){"use strict";function o(t,n){this.element=t,this.page=e(t).find(".page"),this.options=e.extend({},r,n),this._defaults=r,this._name=s,this.isLoading=!0,this.draggable=null,this.tween=null,this.calculateProgress=null,this.init()}var s="autoScroll",r={by:"continuous",speed:"medium",pause:5,click:!1,minimumMovement:3};o.prototype={init:function(){function t(){s.tween.pause(),TweenLite.killDelayedCallsTo(s.calculateProgress),TweenLite.killDelayedCallsTo(r),TweenLite.killDelayedCallsTo(a)}var n,o,s=this,r=null,a=null,l=e(this.element).outerHeight(!0),u=l,c=this.element.scrollHeight-this.element.offsetHeight;this.calculateProgress=function(){u=e(s.element).scrollTop()+l,s.tween.progress(e(s.element).scrollTop()/c).play()},this.canScroll()?("page"===this.options.by?(n="fastest"===this.options.speed?.4:"fast"===this.options.speed?.8:"medium"===this.options.speed?1.2:"slow"===this.options.speed?1.6:2,o=this.page.outerHeight(!0)/e(this.element).outerHeight(!0)*n):(n="fastest"===this.options.speed?60:"fast"===this.options.speed?50:"medium"===this.options.speed?40:"slow"===this.options.speed?30:20,o=Math.abs((this.page.outerHeight(!0)-e(this.element).outerHeight(!0))/n)),Draggable.create(this.element,{type:"scrollTop",throwProps:!0,edgeResistance:.75,minimumMovement:s.options.minimumMovement,onPress:function(){t()},onRelease:function(){"none"!==s.options.by&&TweenLite.delayedCall(s.options.pause,s.calculateProgress)},onClick:function(){s.options.click&&(t(),e(s.element).trigger("scrollClick",[this.pointerEvent]))}}),this.draggable=Draggable.get(this.element),this.tween=TweenLite.to(this.draggable.scrollProxy,o,{scrollTop:c,ease:Linear.easeNone,delay:this.options.pause,paused:!0,onUpdate:"page"===this.options.by?function(){Math.abs(s.draggable.scrollProxy.top())>=u&&(s.tween.pause(),u+=l,TweenLite.delayedCall(s.options.pause,a=function(){s.tween.resume()}))}:i,onComplete:function(){TweenLite.delayedCall(s.options.pause,r=function(){TweenLite.to(s.page,1,{autoAlpha:0,onComplete:function(){s.tween.seek(0).pause(),"page"===s.options.by&&(u=l),e(s.element).trigger("done")}})})}}),TweenLite.set(this.element,{overflowY:"hidden"})):this.options.click&&(Draggable.create(this.element,{type:"scrollTop",throwProps:!0,edgeResistance:.95,minimumMovement:this.options.minimumMovement,onClick:function(){e(s.element).trigger("scrollClick",[this.pointerEvent])}}),this.draggable=Draggable.get(this.element))},canScroll:function(){return this.options&&this.page.height()>e(this.element).height()},destroy:function(){e(this.element).removeData(),this.tween&&this.tween.kill(),this.draggable&&this.draggable.kill(),this.element=null,this.page=null,this.options=null,this._defaults=null,this.draggable=null,this.tween=null,this.calculateProgress=null}},o.prototype.play=function(){this.canScroll()&&"none"!==this.options.by&&this.tween&&(this.isLoading?(this.tween.play(),this.isLoading=!1):(TweenLite.to(this.page,1,{autoAlpha:1}),TweenLite.delayedCall(this.options.pause,this.calculateProgress)))},o.prototype.pause=function(){this.tween&&(TweenLite.killDelayedCallsTo(this.calculateProgress),this.tween.pause())},o.prototype.stop=function(){this.tween&&(TweenLite.killDelayedCallsTo(this.calculateProgress),this.tween.kill()),this.element=null,this.page=null},e.fn.autoScroll=function(t){return this.each(function(){e.data(this,"plugin_"+s)||e.data(this,"plugin_"+s,new o(this,t))})}}(jQuery,window,document),function(e,t){function n(e,t,n){var i=e.children(),o=!1;e.empty();for(var r=0,a=i.length;a>r;r++){var l=i.eq(r);if(e.append(l),n&&e.append(n),s(e,t)){l.remove(),o=!0;break}n&&n.detach()}return o}function i(t,n,r,a,l){var u=!1,c="a, table, thead, tbody, tfoot, tr, col, colgroup, object, embed, param, ol, ul, dl, blockquote, select, optgroup, option, textarea, script, style",d="script, .dotdotdot-keep";return t.contents().detach().each(function(){var h=this,p=e(h);if("undefined"==typeof h)return!0;if(p.is(d))t.append(p);else{if(u)return!0;t.append(p),!l||p.is(a.after)||p.find(a.after).length||t[t.is(c)?"after":"append"](l),s(r,a)&&(u=3==h.nodeType?o(p,n,r,a,l):i(p,n,r,a,l),u||(p.detach(),u=!0)),u||l&&l.detach()}}),n.addClass("is-truncated"),u}function o(t,n,i,o,a){var c=t[0];if(!c)return!1;var h=u(c),p=-1!==h.indexOf(" ")?" ":"　",f="letter"==o.wrap?"":p,g=h.split(f),m=-1,y=-1,w=0,v=g.length-1;for(o.fallbackToLetter&&0==w&&0==v&&(f="",g=h.split(f),v=g.length-1);v>=w&&(0!=w||0!=v);){var S=Math.floor((w+v)/2);if(S==y)break;y=S,l(c,g.slice(0,y+1).join(f)+o.ellipsis),i.children().each(function(){e(this).toggle().toggle()}),s(i,o)?(v=y,o.fallbackToLetter&&0==w&&0==v&&(f="",g=g[0].split(f),m=-1,y=-1,w=0,v=g.length-1)):(m=y,w=y)}if(-1==m||1==g.length&&0==g[0].length){var R=t.parent();t.detach();var b=a&&a.closest(R).length?a.length:0;R.contents().length>b?c=d(R.contents().eq(-1-b),n):(c=d(R,n,!0),b||R.detach()),c&&(h=r(u(c),o),l(c,h),b&&a&&e(c).parent().append(a))}else h=r(g.slice(0,m+1).join(f),o),l(c,h);return!0}function s(e,t){return e.innerHeight()>t.maxHeight}function r(t,n){for(;e.inArray(t.slice(-1),n.lastCharacter.remove)>-1;)t=t.slice(0,-1);return e.inArray(t.slice(-1),n.lastCharacter.noEllipsis)<0&&(t+=n.ellipsis),t}function a(e){return{width:e.innerWidth(),height:e.innerHeight()}}function l(e,t){e.innerText?e.innerText=t:e.nodeValue?e.nodeValue=t:e.textContent&&(e.textContent=t)}function u(e){return e.innerText?e.innerText:e.nodeValue?e.nodeValue:e.textContent?e.textContent:""}function c(e){do e=e.previousSibling;while(e&&1!==e.nodeType&&3!==e.nodeType);return e}function d(t,n,i){var o,s=t&&t[0];if(s){if(!i){if(3===s.nodeType)return s;if(e.trim(t.text()))return d(t.contents().last(),n)}for(o=c(s);!o;){if(t=t.parent(),t.is(n)||!t.length)return!1;o=c(t[0])}if(o)return d(e(o),n)}return!1}function h(t,n){return t?"string"==typeof t?(t=e(t,n),t.length?t:!1):t.jquery?t:!1:!1}function p(e){for(var t=e.innerHeight(),n=["paddingTop","paddingBottom"],i=0,o=n.length;o>i;i++){var s=parseInt(e.css(n[i]),10);isNaN(s)&&(s=0),t-=s}return t}if(!e.fn.dotdotdot){e.fn.dotdotdot=function(t){if(0==this.length)return e.fn.dotdotdot.debug('No element found for "'+this.selector+'".'),this;if(this.length>1)return this.each(function(){e(this).dotdotdot(t)});var o=this;o.data("dotdotdot")&&o.trigger("destroy.dot"),o.data("dotdotdot-style",o.attr("style")||""),o.css("word-wrap","break-word"),"nowrap"===o.css("white-space")&&o.css("white-space","normal"),o.bind_events=function(){return o.bind("update.dot",function(t,a){switch(o.removeClass("is-truncated"),t.preventDefault(),t.stopPropagation(),typeof l.height){case"number":l.maxHeight=l.height;break;case"function":l.maxHeight=l.height.call(o[0]);break;default:l.maxHeight=p(o)}l.maxHeight+=l.tolerance,"undefined"!=typeof a&&(("string"==typeof a||"nodeType"in a&&1===a.nodeType)&&(a=e("<div />").append(a).contents()),a instanceof e&&(r=a)),g=o.wrapInner('<div class="dotdotdot" />').children(),g.contents().detach().end().append(r.clone(!0)).find("br").replaceWith("  <br />  ").end().css({height:"auto",width:"auto",border:"none",padding:0,margin:0});var c=!1,d=!1;return u.afterElement&&(c=u.afterElement.clone(!0),c.show(),u.afterElement.detach()),s(g,l)&&(d="children"==l.wrap?n(g,l,c):i(g,o,g,l,c)),g.replaceWith(g.contents()),g=null,e.isFunction(l.callback)&&l.callback.call(o[0],d,r),u.isTruncated=d,d}).bind("isTruncated.dot",function(e,t){return e.preventDefault(),e.stopPropagation(),"function"==typeof t&&t.call(o[0],u.isTruncated),u.isTruncated}).bind("originalContent.dot",function(e,t){return e.preventDefault(),e.stopPropagation(),"function"==typeof t&&t.call(o[0],r),r}).bind("destroy.dot",function(e){e.preventDefault(),e.stopPropagation(),o.unwatch().unbind_events().contents().detach().end().append(r).attr("style",o.data("dotdotdot-style")||"").data("dotdotdot",!1)}),o},o.unbind_events=function(){return o.unbind(".dot"),o},o.watch=function(){if(o.unwatch(),"window"==l.watch){var t=e(window),n=t.width(),i=t.height();t.bind("resize.dot"+u.dotId,function(){n==t.width()&&i==t.height()&&l.windowResizeFix||(n=t.width(),i=t.height(),d&&clearInterval(d),d=setTimeout(function(){o.trigger("update.dot")},100))})}else c=a(o),d=setInterval(function(){if(o.is(":visible")){var e=a(o);(c.width!=e.width||c.height!=e.height)&&(o.trigger("update.dot"),c=e)}},500);return o},o.unwatch=function(){return e(window).unbind("resize.dot"+u.dotId),d&&clearInterval(d),o};var r=o.contents(),l=e.extend(!0,{},e.fn.dotdotdot.defaults,t),u={},c={},d=null,g=null;return l.lastCharacter.remove instanceof Array||(l.lastCharacter.remove=e.fn.dotdotdot.defaultArrays.lastCharacter.remove),l.lastCharacter.noEllipsis instanceof Array||(l.lastCharacter.noEllipsis=e.fn.dotdotdot.defaultArrays.lastCharacter.noEllipsis),u.afterElement=h(l.after,o),u.isTruncated=!1,u.dotId=f++,o.data("dotdotdot",!0).bind_events().trigger("update.dot"),l.watch&&o.watch(),o},e.fn.dotdotdot.defaults={ellipsis:"... ",wrap:"word",fallbackToLetter:!0,lastCharacter:{},tolerance:0,callback:null,after:null,height:null,watch:!1,windowResizeFix:!0},e.fn.dotdotdot.defaultArrays={lastCharacter:{remove:[" ","　",",",";",".","!","?"],noEllipsis:[]}},e.fn.dotdotdot.debug=function(){};var f=1,g=e.fn.html;e.fn.html=function(n){return n!=t&&!e.isFunction(n)&&this.data("dotdotdot")?this.trigger("update",[n]):g.apply(this,arguments)};var m=e.fn.text;e.fn.text=function(n){return n!=t&&!e.isFunction(n)&&this.data("dotdotdot")?(n=e("<div />").text(n).html(),this.trigger("update",[n])):m.apply(this,arguments)}}}(jQuery);var RiseVision=RiseVision||{};RiseVision.RSS={},RiseVision.RSS=function(e){"use strict";function t(){e.rpc.call("","rsevent_ready",null,p.getString("id"),!0,!0,!0,!0,!0)}function n(){e.rpc.call("","rsevent_done",null,p.getString("id"))}function i(){}function o(){n()}function s(){t()}function r(e){m=_.clone(e),g=new RiseVision.RSS.ContentRSS(p,h),g.build(m)}function a(e){console.dir(e)}function l(){g.scrollPause()}function u(){g.scrollPlay()}function c(t,n){Array.isArray(t)&&t.length>0&&"additionalParams"===t[0]&&Array.isArray(n)&&n.length>0&&(h=JSON.parse(n[0]),p=new e.Prefs,i(),f=new RiseVision.RSS.RiseRSS(h),f.init())}function d(){}var h,p=null,f=null,g=null,m=null;return{onContentDone:o,onContentReady:s,onRiseRSSInit:r,onRiseRSSRefresh:a,pause:l,play:u,setAdditionalParams:c,stop:d}}(gadgets);var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.RiseRSS=function(e){"use strict";function t(){var t=document.getElementById("rss");t&&(t.addEventListener("rise-rss-response",function(e){e.detail&&e.detail.feed&&(n?(n=!1,RiseVision.RSS.onRiseRSSInit(e.detail.feed)):RiseVision.RSS.onRiseRSSRefresh(e.detail.feed))}),t.addEventListener("rise-rss-error",function(e){console.log("rise-rss-error handler"),e.detail&&console.log(e.detail)}),t.setAttribute("url",e.url),t.setAttribute("entries",e.queue),t.setAttribute("refresh",e.refresh),t.go())}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Images={},RiseVision.RSS.Images=function(){"use strict";function e(e){a.push(e),r+=1,r===s.length&&l&&"function"==typeof l&&l()}function t(t){var n=new Image;n.onload=function(){e(this)},n.onerror=function(){e(this)},n.src=t.url}function n(){var n;for(n=0;n<s.length;n+=1)null===s[n]?e(null):t(s[n])}function i(e,t){e.length>0?(s=e,a=[],n(),t&&(l=t)):t&&t()}function o(){return a}var s=[],r=0,a=[],l=null;return{getImages:o,load:i}}();var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.ContentRSS=function(e,t){"use strict";function n(){v={scrollContainer:$("#scrollContainer"),page:$(".page")}}function i(e){var t;return 0===e.length?!1:(t=_.without(e,null),0!==t.length)}function o(e,t){return e&&t?t.indexOf(-1!==e):!1}function s(){return"continuous"===t.scroll.by.transition}function r(){var n=e.getInt("rsH")/parseInt(t.stories);return s()?n-1:n}function a(){return"undefined"!=typeof v.scrollContainer.data(R)?v.scrollContainer.data(R):null}function l(e){var t=null;return _.has(e,"content:encoded")?t=e["content:encoded"]:_.has(e,"description")&&(t=e.description),t}function u(e){var t=null;return _.has(e,"author")?t=e.author:_.has(e,"dc:creator")&&(t=e["dc:creator"]),t}function c(e){var t=RiseVision.RSS.Images.getImages(),n=null;return t.length>0&&t[e]&&t[e].src&&(n=t[e]),n}function d(){a()||v.scrollContainer.autoScroll(t.scroll).on("done",function(){x=!1,RiseVision.RSS.onContentDone()})}function h(e,n){var i,o=l(e),s=u(e),r=c(n),a=document.querySelector("#rssItem").content;return a.querySelector(".headline").textContent=e.title,a.querySelector(".author").textContent=s?s:"",a.querySelector(".date").textContent=e.pubdate,a.querySelector(".story").innerHTML="snippet"===t.selection.story?o?o:"":o?o:"",r?a.querySelector(".image").setAttribute("src",r.src):a.querySelector(".image").removeAttribute("src"),i=$(document.importNode(a,!0))}function p(){var e,n,i=b.length<=t.queue?b.length:t.queue;v.page.empty(),e="none"!==t.scroll.by?i:t.stories<=i?t.stories:i;for(var o=0;e>o;o+=1)n=h(b[o],o),v.page.append(n);$(".item").dotdotdot({height:r()}),$(".item").height(r())}function f(){v.scrollContainer.width(e.getInt("rsW")),v.scrollContainer.height(e.getInt("rsH")),p(),T&&(d(),RiseVision.RSS.onContentReady())}function g(e){for(var t,n,i,s,r,a,u,c=0;c<e.length;c++)a=!1,t=l(e[c]),n=_.has(e[c],"media:content")?e[c]["media:content"]:null,u=_.has(e[c],"enclosure")?e[c].enclosure:null,n?(i=_.has(n,"medium")?n.medium:null,s=_.has(n,"url")?n.url:null,r=_.has(n,"type")?n.type:null,i?"image"===i&&(o(s,t)||(C.push(s),a=!0)):r&&-1!==_.indexOf(S,r)&&(o(s,t)||(C.push(s),a=!0))):u&&(s=_.has(u,"url")?u.url:null,r=_.has(u,"type")?u.type:null,-1!==_.indexOf(S,r)&&(o(s,t)||(C.push(s),a=!0))),a||C.push(null)}function m(){var e=a();e&&e.canScroll()&&!x&&(e.play(),x=!0)}function y(){var e=a();e&&e.canScroll()&&(e.pause(),x=!1)}function w(e){b=e.items,v||n(),C=[],g(b),i(C)?RiseVision.RSS.Images.load(C,function(){T&&f()}):T&&f()}var v,S=["image/bmp","image/gif","image/jpeg","image/png","image/tiff"],R="plugin_autoScroll",b=[],C=[],T=!0,x=!1;return{build:w,scrollPlay:m,scrollPause:y}},function(e,t){"use strict";function n(){RiseVision.RSS.play()}function i(){RiseVision.RSS.pause()}function o(){RiseVision.RSS.pause()}function s(){e.removeEventListener("WebComponentsReady",s),a&&""!==a&&(t.rpc.register("rscmd_play_"+a,n),t.rpc.register("rscmd_pause_"+a,i),t.rpc.register("rscmd_stop_"+a,o),t.rpc.register("rsparam_set_"+a,RiseVision.RSS.setAdditionalParams),t.rpc.call("","rsparam_get",null,a,["additionalParams"]))}var r=new t.Prefs,a=r.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);
//# sourceMappingURL=data:application/json;base64,
