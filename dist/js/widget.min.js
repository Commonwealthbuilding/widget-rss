if("undefined"==typeof config){var config={};"undefined"!=typeof angular&&(angular.module("risevision.widget.rss.config",[]).value("layout4x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-4x1.html").value("layout2x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-2x1.html").value("layout1x2","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-1x2.html"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"))}!function(t,e,n,i){"use strict";function o(e,n){this.element=e,this.page=t(e).find(".page"),this.options=t.extend({},s,n),this._defaults=s,this._name=r,this.init()}var r="autoScroll",s={by:"continuous",speed:"medium",pause:5},a=!0,l=null,u=null,d=null;o.prototype={init:function(){var e,n,o=this,r=null,s=null,a=null,c=t(this.element).outerHeight(!0),p=c,h=this.element.scrollHeight-this.element.offsetHeight;this.canScroll()&&("page"===this.options.by?(e="fastest"===this.options.speed?.4:"fast"===this.options.speed?.8:"medium"===this.options.speed?1.2:"slow"===this.options.speed?1.6:2,n=this.page.outerHeight(!0)/t(this.element).outerHeight(!0)*e):(e="fastest"===this.options.speed?60:"fast"===this.options.speed?50:"medium"===this.options.speed?40:"slow"===this.options.speed?30:20,n=Math.abs((this.page.outerHeight(!0)-t(this.element).outerHeight(!0))/e)),Draggable.create(this.element,{type:"scrollTop",throwProps:!0,edgeResistance:.75,onPress:function(){u.pause(),TweenLite.killDelayedCallsTo(r),TweenLite.killDelayedCallsTo(s),TweenLite.killDelayedCallsTo(d),TweenLite.killDelayedCallsTo(a)},onRelease:function(){"none"!==o.options.by&&TweenLite.delayedCall(o.options.pause,r=function(){p=t(o.element).scrollTop()+c,u.progress(t(o.element).scrollTop()/h).play()})}}),l=Draggable.get(this.element),u=TweenLite.to(l.scrollProxy,n,{scrollTop:h,ease:Linear.easeNone,delay:this.options.pause,paused:!0,onUpdate:"page"===this.options.by?function(){Math.abs(l.scrollProxy.top())>=p&&(u.pause(),p+=c,TweenLite.delayedCall(o.options.pause,a=function(){u.resume()}))}:i,onComplete:function(){TweenLite.delayedCall(o.options.pause,s=function(){TweenLite.to(o.page,1,{autoAlpha:0,onComplete:function(){u.seek(0).pause(),"page"===o.options.by&&(p=c),t(o.element).trigger("done")}})})}}),TweenLite.set(this.element,{overflowY:"hidden"}))},canScroll:function(){return this.options&&this.page.height()>t(this.element).height()}},o.prototype.play=function(){this.canScroll()&&"none"!==this.options.by&&u&&(a?(u.play(),a=!1):(TweenLite.to(this.page,1,{autoAlpha:1}),TweenLite.delayedCall(this.options.pause,d=function(){u.play()})))},o.prototype.pause=function(){u&&u.pause()},o.prototype.stop=function(){u&&u.kill(),this.element=null,this.page=null},t.fn.autoScroll=function(e){return this.each(function(){t.data(this,"plugin_"+r)||t.data(this,"plugin_"+r,new o(this,e))})}}(jQuery,window,document),function(t,e){function n(t,e,n){var i=t.children(),o=!1;t.empty();for(var s=0,a=i.length;a>s;s++){var l=i.eq(s);if(t.append(l),n&&t.append(n),r(t,e)){l.remove(),o=!0;break}n&&n.detach()}return o}function i(e,n,s,a,l){var u=!1,d="a, table, thead, tbody, tfoot, tr, col, colgroup, object, embed, param, ol, ul, dl, blockquote, select, optgroup, option, textarea, script, style",c="script, .dotdotdot-keep";return e.contents().detach().each(function(){var p=this,h=t(p);if("undefined"==typeof p)return!0;if(h.is(c))e.append(h);else{if(u)return!0;e.append(h),!l||h.is(a.after)||h.find(a.after).length||e[e.is(d)?"after":"append"](l),r(s,a)&&(u=3==p.nodeType?o(h,n,s,a,l):i(h,n,s,a,l),u||(h.detach(),u=!0)),u||l&&l.detach()}}),n.addClass("is-truncated"),u}function o(e,n,i,o,a){var d=e[0];if(!d)return!1;var p=u(d),h=-1!==p.indexOf(" ")?" ":"　",f="letter"==o.wrap?"":h,g=p.split(f),m=-1,y=-1,S=0,v=g.length-1;for(o.fallbackToLetter&&0==S&&0==v&&(f="",g=p.split(f),v=g.length-1);v>=S&&(0!=S||0!=v);){var R=Math.floor((S+v)/2);if(R==y)break;y=R,l(d,g.slice(0,y+1).join(f)+o.ellipsis),r(i,o)?(v=y,o.fallbackToLetter&&0==S&&0==v&&(f="",g=g[0].split(f),m=-1,y=-1,S=0,v=g.length-1)):(m=y,S=y)}if(-1==m||1==g.length&&0==g[0].length){var w=e.parent();e.detach();var b=a&&a.closest(w).length?a.length:0;w.contents().length>b?d=c(w.contents().eq(-1-b),n):(d=c(w,n,!0),b||w.detach()),d&&(p=s(u(d),o),l(d,p),b&&a&&t(d).parent().append(a))}else p=s(g.slice(0,m+1).join(f),o),l(d,p);return!0}function r(t,e){return t.innerHeight()>e.maxHeight}function s(e,n){for(;t.inArray(e.slice(-1),n.lastCharacter.remove)>-1;)e=e.slice(0,-1);return t.inArray(e.slice(-1),n.lastCharacter.noEllipsis)<0&&(e+=n.ellipsis),e}function a(t){return{width:t.innerWidth(),height:t.innerHeight()}}function l(t,e){t.innerText?t.innerText=e:t.nodeValue?t.nodeValue=e:t.textContent&&(t.textContent=e)}function u(t){return t.innerText?t.innerText:t.nodeValue?t.nodeValue:t.textContent?t.textContent:""}function d(t){do t=t.previousSibling;while(t&&1!==t.nodeType&&3!==t.nodeType);return t}function c(e,n,i){var o,r=e&&e[0];if(r){if(!i){if(3===r.nodeType)return r;if(t.trim(e.text()))return c(e.contents().last(),n)}for(o=d(r);!o;){if(e=e.parent(),e.is(n)||!e.length)return!1;o=d(e[0])}if(o)return c(t(o),n)}return!1}function p(e,n){return e?"string"==typeof e?(e=t(e,n),e.length?e:!1):e.jquery?e:!1:!1}function h(t){for(var e=t.innerHeight(),n=["paddingTop","paddingBottom"],i=0,o=n.length;o>i;i++){var r=parseInt(t.css(n[i]),10);isNaN(r)&&(r=0),e-=r}return e}if(!t.fn.dotdotdot){t.fn.dotdotdot=function(e){if(0==this.length)return t.fn.dotdotdot.debug('No element found for "'+this.selector+'".'),this;if(this.length>1)return this.each(function(){t(this).dotdotdot(e)});var o=this;o.data("dotdotdot")&&o.trigger("destroy.dot"),o.data("dotdotdot-style",o.attr("style")||""),o.css("word-wrap","break-word"),"nowrap"===o.css("white-space")&&o.css("white-space","normal"),o.bind_events=function(){return o.bind("update.dot",function(e,a){o.removeClass("is-truncated"),e.preventDefault(),e.stopPropagation(),l.maxHeight="number"==typeof l.height?l.height:h(o),l.maxHeight+=l.tolerance,"undefined"!=typeof a&&(("string"==typeof a||"nodeType"in a&&1===a.nodeType)&&(a=t("<div />").append(a).contents()),a instanceof t&&(s=a)),g=o.wrapInner('<div class="dotdotdot" />').children(),g.contents().detach().end().append(s.clone(!0)).find("br").replaceWith("  <br />  ").end().css({height:"auto",width:"auto",border:"none",padding:0,margin:0});var d=!1,c=!1;return u.afterElement&&(d=u.afterElement.clone(!0),d.show(),u.afterElement.detach()),r(g,l)&&(c="children"==l.wrap?n(g,l,d):i(g,o,g,l,d)),g.replaceWith(g.contents()),g=null,t.isFunction(l.callback)&&l.callback.call(o[0],c,s),u.isTruncated=c,c}).bind("isTruncated.dot",function(t,e){return t.preventDefault(),t.stopPropagation(),"function"==typeof e&&e.call(o[0],u.isTruncated),u.isTruncated}).bind("originalContent.dot",function(t,e){return t.preventDefault(),t.stopPropagation(),"function"==typeof e&&e.call(o[0],s),s}).bind("destroy.dot",function(t){t.preventDefault(),t.stopPropagation(),o.unwatch().unbind_events().contents().detach().end().append(s).attr("style",o.data("dotdotdot-style")||"").data("dotdotdot",!1)}),o},o.unbind_events=function(){return o.unbind(".dot"),o},o.watch=function(){if(o.unwatch(),"window"==l.watch){var e=t(window),n=e.width(),i=e.height();e.bind("resize.dot"+u.dotId,function(){n==e.width()&&i==e.height()&&l.windowResizeFix||(n=e.width(),i=e.height(),c&&clearInterval(c),c=setTimeout(function(){o.trigger("update.dot")},100))})}else d=a(o),c=setInterval(function(){if(o.is(":visible")){var t=a(o);(d.width!=t.width||d.height!=t.height)&&(o.trigger("update.dot"),d=t)}},500);return o},o.unwatch=function(){return t(window).unbind("resize.dot"+u.dotId),c&&clearInterval(c),o};var s=o.contents(),l=t.extend(!0,{},t.fn.dotdotdot.defaults,e),u={},d={},c=null,g=null;return l.lastCharacter.remove instanceof Array||(l.lastCharacter.remove=t.fn.dotdotdot.defaultArrays.lastCharacter.remove),l.lastCharacter.noEllipsis instanceof Array||(l.lastCharacter.noEllipsis=t.fn.dotdotdot.defaultArrays.lastCharacter.noEllipsis),u.afterElement=p(l.after,o),u.isTruncated=!1,u.dotId=f++,o.data("dotdotdot",!0).bind_events().trigger("update.dot"),l.watch&&o.watch(),o},t.fn.dotdotdot.defaults={ellipsis:"... ",wrap:"word",fallbackToLetter:!0,lastCharacter:{},tolerance:0,callback:null,after:null,height:null,watch:!1,windowResizeFix:!0},t.fn.dotdotdot.defaultArrays={lastCharacter:{remove:[" ","　",",",";",".","!","?"],noEllipsis:[]}},t.fn.dotdotdot.debug=function(){};var f=1,g=t.fn.html;t.fn.html=function(n){return n!=e&&!t.isFunction(n)&&this.data("dotdotdot")?this.trigger("update",[n]):g.apply(this,arguments)};var m=t.fn.text;t.fn.text=function(n){return n!=e&&!t.isFunction(n)&&this.data("dotdotdot")?(n=t("<div />").text(n).html(),this.trigger("update",[n])):m.apply(this,arguments)}}}(jQuery);var RiseVision=RiseVision||{};RiseVision.RSS={},RiseVision.RSS=function(t){"use strict";function e(){t.rpc.call("","rsevent_ready",null,h.getString("id"),!0,!0,!0,!0,!0)}function n(){t.rpc.call("","rsevent_done",null,h.getString("id"))}function i(){}function o(){n()}function r(){e()}function s(t){m=_.clone(t),g=new RiseVision.RSS.ContentRSS(h,p),g.build(m)}function a(t){console.dir(t)}function l(){g.scrollPause()}function u(){g.scrollPlay()}function d(e,n){Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(n)&&n.length>0&&(p=JSON.parse(n[0]),h=new t.Prefs,i(),f=new RiseVision.RSS.RiseRSS(p),f.init())}function c(){}var p,h=null,f=null,g=null,m=null;return{onContentDone:o,onContentReady:r,onRiseRSSInit:s,onRiseRSSRefresh:a,pause:l,play:u,setAdditionalParams:d,stop:c}}(gadgets);var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.RiseRSS=function(t){"use strict";function e(){var e=document.getElementById("rss");e&&(e.addEventListener("rise-rss-response",function(t){t.detail&&t.detail.feed&&(n?(n=!1,RiseVision.RSS.onRiseRSSInit(t.detail.feed)):RiseVision.RSS.onRiseRSSRefresh(t.detail.feed))}),e.addEventListener("rise-rss-error",function(t){console.log("rise-rss-error handler"),t.detail&&console.log(t.detail)}),e.setAttribute("url",t.url),e.setAttribute("entries",t.queue),e.setAttribute("refresh",t.refresh),e.go())}var n=!0;return{init:e}};var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Images={},RiseVision.RSS.Images=function(){"use strict";function t(t){a.push(t),s+=1,s===r.length&&l&&"function"==typeof l&&l()}function e(e){var n=new Image;n.onload=function(){t(this)},n.onerror=function(){t(this)},n.src=e.url}function n(){var n;for(n=0;n<r.length;n+=1)null===r[n]?t(null):e(r[n])}function i(t,e){t.length>0?(r=t,a=[],n(),e&&(l=e)):e&&e()}function o(){return a}var r=[],s=0,a=[],l=null;return{getImages:o,load:i}}();var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.ContentRSS=function(t,e){"use strict";function n(){v={scrollContainer:$("#scrollContainer"),page:$(".page")}}function i(t){var e;return 0===t.length?!1:(e=_.without(t,null),0!==e.length)}function o(t,e){return t&&e?e.indexOf(-1!==t):!1}function r(){return"continuous"===e.scroll.by.transition}function s(){var n=t.getInt("rsH")/parseInt(e.stories);return r()?n-1:n}function a(){return"undefined"!=typeof v.scrollContainer.data(w)?v.scrollContainer.data(w):null}function l(t){var e=null;return _.has(t,"content:encoded")?e=t["content:encoded"]:_.has(t,"description")&&(e=t.description),e}function u(t){var e=null;return _.has(t,"author")?e=t.author:_.has(t,"dc:creator")&&(e=t["dc:creator"]),e}function d(t){var e=RiseVision.RSS.Images.getImages(),n=null;return e.length>0&&e[t]&&e[t].src&&(n=e[t]),n}function c(){a()||v.scrollContainer.autoScroll(e.scroll).on("done",function(){x=!1,RiseVision.RSS.onContentDone()})}function p(t,n){var i,o=l(t),r=u(t),s=d(n),a=document.querySelector("#rssItem").content;return a.querySelector(".headline").textContent=t.title,a.querySelector(".author").textContent=r?r:"",a.querySelector(".date").textContent=t.pubdate,a.querySelector(".story").innerHTML="snippet"===e.selection.story?o?o:"":o?o:"",s?a.querySelector(".image").setAttribute("src",s.src):a.querySelector(".image").removeAttribute("src"),i=$(document.importNode(a,!0))}function h(){var t,n,i=b.length<=e.queue?b.length:e.queue;v.page.empty(),t="none"!==e.scroll.by?i:e.stories<=i?e.stories:i;for(var o=0;t>o;o+=1)n=p(b[o],o),v.page.append(n);$(".item").dotdotdot({height:s()}),$(".item").height(s())}function f(){v.scrollContainer.width(t.getInt("rsW")),v.scrollContainer.height(t.getInt("rsH")),h(),T&&(c(),RiseVision.RSS.onContentReady())}function g(t){for(var e,n,i,r,s,a,u,d=0;d<t.length;d++)a=!1,e=l(t[d]),n=_.has(t[d],"media:content")?t[d]["media:content"]:null,u=_.has(t[d],"enclosure")?t[d].enclosure:null,n?(i=_.has(n,"medium")?n.medium:null,r=_.has(n,"url")?n.url:null,s=_.has(n,"type")?n.type:null,i?"image"===i&&(o(r,e)||(C.push(r),a=!0)):s&&-1!==_.indexOf(R,s)&&(o(r,e)||(C.push(r),a=!0))):u&&(r=_.has(u,"url")?u.url:null,s=_.has(u,"type")?u.type:null,-1!==_.indexOf(R,s)&&(o(r,e)||(C.push(r),a=!0))),a||C.push(null)}function m(){var t=a();t&&t.canScroll()&&!x&&(t.play(),x=!0)}function y(){var t=a();t&&t.canScroll()&&(t.pause(),x=!1)}function S(t){b=t.items,v||n(),C=[],g(b),i(C)?RiseVision.RSS.Images.load(C,function(){T&&f()}):T&&f()}var v,R=["image/bmp","image/gif","image/jpeg","image/png","image/tiff"],w="plugin_autoScroll",b=[],C=[],T=!0,x=!1;return{build:S,scrollPlay:m,scrollPause:y}},function(t,e){"use strict";function n(){RiseVision.RSS.play()}function i(){RiseVision.RSS.pause()}function o(){RiseVision.RSS.pause()}function r(){t.removeEventListener("WebComponentsReady",r),a&&""!==a&&(e.rpc.register("rscmd_play_"+a,n),e.rpc.register("rscmd_pause_"+a,i),e.rpc.register("rscmd_stop_"+a,o),e.rpc.register("rsparam_set_"+a,RiseVision.RSS.setAdditionalParams),e.rpc.call("","rsparam_get",null,a,["additionalParams"]))}var s=new e.Prefs,a=s.getString("id");t.oncontextmenu=function(){return!1},t.addEventListener("WebComponentsReady",r)}(window,gadgets);
//# sourceMappingURL=data:application/json;base64,