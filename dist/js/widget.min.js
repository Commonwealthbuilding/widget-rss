!function(e,t){function n(e,t,n){var i=e.children(),o=!1;e.empty();for(var s=0,a=i.length;a>s;s++){var l=i.eq(s);if(e.append(l),n&&e.append(n),r(e,t)){l.remove(),o=!0;break}n&&n.detach()}return o}function i(t,n,s,a,l){var d=!1,u="a, table, thead, tbody, tfoot, tr, col, colgroup, object, embed, param, ol, ul, dl, blockquote, select, optgroup, option, textarea, script, style",c="script, .dotdotdot-keep";return t.contents().detach().each(function(){var f=this,h=e(f);if("undefined"==typeof f)return!0;if(h.is(c))t.append(h);else{if(d)return!0;t.append(h),!l||h.is(a.after)||h.find(a.after).length||t[t.is(u)?"after":"append"](l),r(s,a)&&(d=3==f.nodeType?o(h,n,s,a,l):i(h,n,s,a,l),d||(h.detach(),d=!0)),d||l&&l.detach()}}),n.addClass("is-truncated"),d}function o(t,n,i,o,a){var u=t[0];if(!u)return!1;var f=d(u),h=-1!==f.indexOf(" ")?" ":"　",p="letter"==o.wrap?"":h,g=f.split(p),m=-1,v=-1,S=0,y=g.length-1;for(o.fallbackToLetter&&0==S&&0==y&&(p="",g=f.split(p),y=g.length-1);y>=S&&(0!=S||0!=y);){var R=Math.floor((S+y)/2);if(R==v)break;v=R,l(u,g.slice(0,v+1).join(p)+o.ellipsis),i.children().each(function(){e(this).toggle().toggle()}),r(i,o)?(y=v,o.fallbackToLetter&&0==S&&0==y&&(p="",g=g[0].split(p),m=-1,v=-1,S=0,y=g.length-1)):(m=v,S=v)}if(-1==m||1==g.length&&0==g[0].length){var w=t.parent();t.detach();var C=a&&a.closest(w).length?a.length:0;w.contents().length>C?u=c(w.contents().eq(-1-C),n):(u=c(w,n,!0),C||w.detach()),u&&(f=s(d(u),o),l(u,f),C&&a&&e(u).parent().append(a))}else f=s(g.slice(0,m+1).join(p),o),l(u,f);return!0}function r(e,t){return e.innerHeight()>t.maxHeight}function s(t,n){for(;e.inArray(t.slice(-1),n.lastCharacter.remove)>-1;)t=t.slice(0,-1);return e.inArray(t.slice(-1),n.lastCharacter.noEllipsis)<0&&(t+=n.ellipsis),t}function a(e){return{width:e.innerWidth(),height:e.innerHeight()}}function l(e,t){e.innerText?e.innerText=t:e.nodeValue?e.nodeValue=t:e.textContent&&(e.textContent=t)}function d(e){return e.innerText?e.innerText:e.nodeValue?e.nodeValue:e.textContent?e.textContent:""}function u(e){do e=e.previousSibling;while(e&&1!==e.nodeType&&3!==e.nodeType);return e}function c(t,n,i){var o,r=t&&t[0];if(r){if(!i){if(3===r.nodeType)return r;if(e.trim(t.text()))return c(t.contents().last(),n)}for(o=u(r);!o;){if(t=t.parent(),t.is(n)||!t.length)return!1;o=u(t[0])}if(o)return c(e(o),n)}return!1}function f(t,n){return t?"string"==typeof t?(t=e(t,n),t.length?t:!1):t.jquery?t:!1:!1}function h(e){for(var t=e.innerHeight(),n=["paddingTop","paddingBottom"],i=0,o=n.length;o>i;i++){var r=parseInt(e.css(n[i]),10);isNaN(r)&&(r=0),t-=r}return t}if(!e.fn.dotdotdot){e.fn.dotdotdot=function(t){if(0==this.length)return e.fn.dotdotdot.debug('No element found for "'+this.selector+'".'),this;if(this.length>1)return this.each(function(){e(this).dotdotdot(t)});var o=this;o.data("dotdotdot")&&o.trigger("destroy.dot"),o.data("dotdotdot-style",o.attr("style")||""),o.css("word-wrap","break-word"),"nowrap"===o.css("white-space")&&o.css("white-space","normal"),o.bind_events=function(){return o.bind("update.dot",function(t,a){switch(o.removeClass("is-truncated"),t.preventDefault(),t.stopPropagation(),typeof l.height){case"number":l.maxHeight=l.height;break;case"function":l.maxHeight=l.height.call(o[0]);break;default:l.maxHeight=h(o)}l.maxHeight+=l.tolerance,"undefined"!=typeof a&&(("string"==typeof a||"nodeType"in a&&1===a.nodeType)&&(a=e("<div />").append(a).contents()),a instanceof e&&(s=a)),g=o.wrapInner('<div class="dotdotdot" />').children(),g.contents().detach().end().append(s.clone(!0)).find("br").replaceWith("  <br />  ").end().css({height:"auto",width:"auto",border:"none",padding:0,margin:0});var u=!1,c=!1;return d.afterElement&&(u=d.afterElement.clone(!0),u.show(),d.afterElement.detach()),r(g,l)&&(c="children"==l.wrap?n(g,l,u):i(g,o,g,l,u)),g.replaceWith(g.contents()),g=null,e.isFunction(l.callback)&&l.callback.call(o[0],c,s),d.isTruncated=c,c}).bind("isTruncated.dot",function(e,t){return e.preventDefault(),e.stopPropagation(),"function"==typeof t&&t.call(o[0],d.isTruncated),d.isTruncated}).bind("originalContent.dot",function(e,t){return e.preventDefault(),e.stopPropagation(),"function"==typeof t&&t.call(o[0],s),s}).bind("destroy.dot",function(e){e.preventDefault(),e.stopPropagation(),o.unwatch().unbind_events().contents().detach().end().append(s).attr("style",o.data("dotdotdot-style")||"").data("dotdotdot",!1)}),o},o.unbind_events=function(){return o.unbind(".dot"),o},o.watch=function(){if(o.unwatch(),"window"==l.watch){var t=e(window),n=t.width(),i=t.height();t.bind("resize.dot"+d.dotId,function(){n==t.width()&&i==t.height()&&l.windowResizeFix||(n=t.width(),i=t.height(),c&&clearInterval(c),c=setTimeout(function(){o.trigger("update.dot")},100))})}else u=a(o),c=setInterval(function(){if(o.is(":visible")){var e=a(o);(u.width!=e.width||u.height!=e.height)&&(o.trigger("update.dot"),u=e)}},500);return o},o.unwatch=function(){return e(window).unbind("resize.dot"+d.dotId),c&&clearInterval(c),o};var s=o.contents(),l=e.extend(!0,{},e.fn.dotdotdot.defaults,t),d={},u={},c=null,g=null;return l.lastCharacter.remove instanceof Array||(l.lastCharacter.remove=e.fn.dotdotdot.defaultArrays.lastCharacter.remove),l.lastCharacter.noEllipsis instanceof Array||(l.lastCharacter.noEllipsis=e.fn.dotdotdot.defaultArrays.lastCharacter.noEllipsis),d.afterElement=f(l.after,o),d.isTruncated=!1,d.dotId=p++,o.data("dotdotdot",!0).bind_events().trigger("update.dot"),l.watch&&o.watch(),o},e.fn.dotdotdot.defaults={ellipsis:"... ",wrap:"word",fallbackToLetter:!0,lastCharacter:{},tolerance:0,callback:null,after:null,height:null,watch:!1,windowResizeFix:!0},e.fn.dotdotdot.defaultArrays={lastCharacter:{remove:[" ","　",",",";",".","!","?"],noEllipsis:[]}},e.fn.dotdotdot.debug=function(){};var p=1,g=e.fn.html;e.fn.html=function(n){return n!=t&&!e.isFunction(n)&&this.data("dotdotdot")?this.trigger("update",[n]):g.apply(this,arguments)};var m=e.fn.text;e.fn.text=function(n){return n!=t&&!e.isFunction(n)&&this.data("dotdotdot")?(n=e("<div />").text(n).html(),this.trigger("update",[n])):m.apply(this,arguments)}}}(jQuery);var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",i="color: "+(t.color?t.color:t.forecolor)+"; ",o="font-size: "+(-1===t.size.indexOf("px")?t.size+"px; ":t.size+"; "),r="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+(t.highlightColor?t.highlightColor:t.backcolor)+"; ";return"."+e+" {"+n+i+o+r+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&o(n.fontSetting.font.family,r))})}function i(e,t,n){var i=null,o="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",o)}function o(e,t){var n,i=document.createElement("link");t=t||document,i.setAttribute("rel","stylesheet"),i.setAttribute("type","text/css"),n=e.split(",")[0],n=n.replace(/'/g,""),i.setAttribute("href","https://fonts.googleapis.com/css?family="+n),null!==i&&t.getElementsByTagName("head")[0].appendChild(i)}function r(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){for(var t,n=window.location.search.substring(1),i=n.split("&"),o=0;o<i.length;o++)if(t=i[o].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}function a(e){var t="";switch(e){case 404:t="The file does not exist or cannot be accessed.";break;case 507:t="There is not enough disk space to save the file on Rise Cache.";break;default:t="There was a problem retrieving the file from Rise Cache."}return t}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFont:o,preloadImages:r,getRiseCacheErrorMessage:a}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var i=null;e.event?(i=e,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=s,t(i)):t(i)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,i=e.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),t+n+i}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function i(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function o(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function r(e,t){a=e,s=t}var s="",a="";return{getInsertData:i,getFileFormat:n,logEvent:o,setIds:r}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-d<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,o){function c(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",i),d=t.refreshedAt||d,u=t.token||u,n=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,u="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.RSS={},RiseVision.RSS=function(e,t){"use strict";function n(){t.rpc.call("","rsevent_ready",null,y.getString("id"),!0,!0,!0,!0,!0)}function i(){t.rpc.call("","rsevent_done",null,y.getString("id")),null!==E&&d(E,!0),d({event:"done",feed_url:S.url},!1)}function o(){var e={event:"error",event_details:"no feed items",feed_url:S.url};d(e,!0),m("There are no items to show from this RSS feed.")}function r(){clearTimeout(I),I=null}function s(){r(),I=setTimeout(function(){i()},5e3)}function a(){R=new RiseVision.Common.Message(e.getElementById("container"),e.getElementById("messageContainer")),R.show("Please wait while your feed is loaded.");var t=[{"class":"story_font-style",fontSetting:S.story.fontStyle}];_.isEmpty(S.headline.fontStyle)||t.push({"class":"headline_font-style",fontSetting:S.headline.fontStyle}),_.isEmpty(S.timestamp.fontStyle)||t.push({"class":"timestamp_font-style",fontSetting:S.timestamp.fontStyle}),RiseVision.Common.Utilities.loadFonts(t),w=new RiseVision.RSS.RiseRSS(S),w.init(),n()}function l(){return"rss_events"}function d(e,t){t&&(E=e),RiseVision.Common.LoggerUtils.logEvent(l(),e)}function u(){i()}function c(e){console.log("onRiseRSSInit"),console.dir(e),C=new RiseVision.RSS.Content(y,S),e.items&&e.items.length>0?(R.hide(),T=_.clone(e),C.init(T),b||C.play()):o()}function f(e){console.log("onRiseRSSRefresh"),console.dir(e);var t=!1;if(e.items&&0!==e.items.length)if(T&&e.items.length===T.items.length){for(var n=0;n<T.items.length;n+=1)if(!_.isEqual(e.items[n],T.items[n])){t=!0;break}}else t=!0;else o();t&&(T=_.clone(e),V?(C||(C=new RiseVision.RSS.Content(y,S)),R.hide(),C.init(T),V=!1,E=null):C.update(e))}function h(){return b=!0,V?(r(),void 0):(C&&C.pause(),void 0)}function p(){return b=!1,d({event:"play",feed_url:S.url},!1),V?(s(),void 0):(C&&C.play(),void 0)}function g(n){S=JSON.parse(JSON.stringify(n)),y=new t.Prefs,S.width=y.getInt("rsW"),S.height=y.getInt("rsH"),e.getElementById("container").style.width=S.width+"px",e.getElementById("container").style.height=S.height+"px",a()}function m(e){V=!0,C.reset(),T=null,R.show(e),b||s()}function v(){h()}var S=null,y=new t.Prefs,R=null,w=null,C=null,T=null,b=!0,I=null,E=null,V=!1;return{getTableName:l,logEvent:d,onContentDone:u,onRiseRSSInit:c,onRiseRSSRefresh:f,pause:h,play:p,setAdditionalParams:g,showError:m,stop:v}}(document,gadgets);var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Utils=function(){"use strict";function e(e){var t,n,i=document.createElement("div");for(i.innerHTML=e,t=i.getElementsByTagName("script"),n=t.length;n--;)t[n].parentNode.removeChild(t[n]);return i.innerHTML}function t(e){var t=120;return e.length>t&&(e=e.substring(0,t),e=e.replace(/\w+$/,""),e+=" ..."),e}return{stripScripts:e,truncate:t}}();var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.RiseRSS=function(e){"use strict";function t(){var t=document.querySelector("rise-rss");t.addEventListener("rise-rss-response",function(e){e.detail&&e.detail.feed&&(n?(n=!1,RiseVision.RSS.onRiseRSSInit(e.detail.feed)):RiseVision.RSS.onRiseRSSRefresh(e.detail.feed))}),t.addEventListener("rise-rss-error",function(t){var n="";t.detail&&"string"==typeof t.detail?n=t.detail:t.detail&&Array.isArray(t.detail)&&t.detail.length>0&&(n=t.detail[0]);var i={event:"error",event_details:"rise rss error",error_details:n,feed_url:e.url};RiseVision.RSS.logEvent(i,!0),RiseVision.RSS.showError("Sorry, there was a problem with the RSS feed.",!0)}),t.setAttribute("url",e.url),e.itemsInQueue&&t.setAttribute("entries",e.itemsInQueue),t.go()}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Content=function(e,t){"use strict";function n(){y={page:$(".page")}}function i(){var n=R.length<=t.itemsToShow?R.length:t.itemsToShow;return e.getInt("rsH")/n}function o(e){var n={};return e+t.itemsToShow>=R.length-1?(n.itemsToShow=R.length-(e+1),n.currentItemIndex=R.length-1):(n.itemsToShow=t.itemsToShow,n.currentItemIndex=e+t.itemsToShow),n}function r(){var e={};return R.length<=t.itemsToShow?(e.itemsToShow=R.length,e.currentItemIndex=R.length-1):(e.itemsToShow=t.itemsToShow,e.currentItemIndex=t.itemsToShow-1),e}function s(e){var t=null;return _.has(e,"content:encoded")?t=e["content:encoded"]:_.has(e,"description")&&(t=e.description),t}function a(e){var n,i,o=s(e),r=document.querySelector("#rssItem").content,a=$(r.cloneNode(!0));if(!e.title||"undefined"!=typeof t.dataSelection.showTitle&&!t.dataSelection.showTitle?a.find(".headline").remove():(a.find(".headline").css("textAlign",t.headline.fontStyle.align),a.find(".headline a").text(e.title)),!e.pubdate||"undefined"!=typeof t.dataSelection.showTimestamp&&!t.dataSelection.showTimestamp)a.find(".timestamp").remove();else{var l=new Date(e.pubdate),d={year:"numeric",month:"long",day:"numeric"},u=l.toLocaleDateString("en-us",d);a.find(".timestamp").css("textAlign",t.timestamp.fontStyle.align),a.find(".timestamp").text(u)}return o?(n=a.find(".story"),n.css("textAlign",t.story.fontStyle.align),o=w.stripScripts(o),"snippet"===t.dataSelection.showDescription?n.html(w.truncate($("<div/>").html(o).text())):n.html(o),n.find("p").addClass("story_font-style"),n.find("div").addClass("story_font-style"),n.find("span").addClass("story_font-style")):a.remove(".story"),i=$(document.importNode(a[0],!0))}function l(e){"fade"===b.type?($(".item").one("transitionend",function(){d(e)}),$(".item").addClass("fade-out").removeClass("fade-in")):d(e)}function d(e){y.page.empty(),e&&"function"==typeof e&&e()}function u(e){y.page.append(a(R[e])),$(".item").height(i()),"fade"===b.type&&$(".item").addClass("fade-in"),$(".item").removeClass("hide"),$(".item").dotdotdot({height:i()})}function c(){var e,t,n=r(),i=o(C);return C===R.length-1?(h(),l(function(){for(var e=0;e<n.itemsToShow;e+=1)u(e);C=n.currentItemIndex,RiseVision.RSS.onContentDone()}),I=!1,void 0):(I?(e=0,I=!1,t=n.itemsToShow,C=n.currentItemIndex):(e=C+1,t=i.itemsToShow,C=i.currentItemIndex),l(function(){for(var n=e;e+t>n;n+=1)u(n)}),void 0)}function f(){null===T&&(T=setInterval(function(){c()},b.duration))}function h(){clearInterval(T),T=null}function p(e){var n;R=e.items,t.transition&&(b=t.transition),n=r(),C=n.currentItemIndex;for(var i=0;i<n.itemsToShow;i+=1)u(i)}function g(){h()}function m(){h(),l(),R=[]}function v(){f()}function S(e){R=e.items,I=!0}var y,R=[],w=RiseVision.RSS.Utils,C=0,T=null,b={type:"none",duration:1e4},I=!1;return n(),{init:p,pause:g,play:v,reset:m,update:S}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(e,t,n){"use strict";function i(e,t){var n,i="",o="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(i=t[0]),"displayId"===e[1]&&(o=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,o),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),RiseVision.RSS.setAdditionalParams(n)))}function o(){RiseVision.RSS.play()}function r(){RiseVision.RSS.pause()}function s(){RiseVision.RSS.stop()}function a(){e.removeEventListener("WebComponentsReady",a),d&&""!==d&&(n.rpc.register("rscmd_play_"+d,o),n.rpc.register("rscmd_pause_"+d,r),n.rpc.register("rscmd_stop_"+d,s),n.rpc.register("rsparam_set_"+d,i),n.rpc.call("","rsparam_get",null,d,["companyId","displayId","additionalParams"]))}var l=new n.Prefs,d=l.getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",a)}(window,document,gadgets);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dpZGdldC5taW4uanMiXSwibmFtZXMiOlsiJCIsInVuZGVmIiwiY2hpbGRyZW4iLCIkZWxlbSIsIm8iLCJhZnRlciIsIiRlbGVtZW50cyIsImlzVHJ1bmNhdGVkIiwiZW1wdHkiLCJhIiwibCIsImxlbmd0aCIsIiRlIiwiZXEiLCJhcHBlbmQiLCJ0ZXN0IiwicmVtb3ZlIiwiZGV0YWNoIiwiZWxsaXBzaXMiLCIkZCIsIiRpIiwibm90eCIsIm5vdHkiLCJjb250ZW50cyIsImVhY2giLCJlIiwidGhpcyIsImlzIiwiZmluZCIsIm5vZGVUeXBlIiwiZWxsaXBzaXNFbGVtZW50IiwiYWRkQ2xhc3MiLCJ0eHQiLCJnZXRUZXh0Q29udGVudCIsInNwYWNlIiwiaW5kZXhPZiIsInNlcGFyYXRvciIsIndyYXAiLCJ0ZXh0QXJyIiwic3BsaXQiLCJwb3NpdGlvbiIsIm1pZFBvcyIsInN0YXJ0UG9zIiwiZW5kUG9zIiwiZmFsbGJhY2tUb0xldHRlciIsIm0iLCJNYXRoIiwiZmxvb3IiLCJzZXRUZXh0Q29udGVudCIsInNsaWNlIiwiam9pbiIsInRvZ2dsZSIsIiR3IiwicGFyZW50IiwiYWZ0ZXJMZW5ndGgiLCJjbG9zZXN0IiwiZmluZExhc3RUZXh0Tm9kZSIsImFkZEVsbGlwc2lzIiwiaW5uZXJIZWlnaHQiLCJtYXhIZWlnaHQiLCJpbkFycmF5IiwibGFzdENoYXJhY3RlciIsIm5vRWxsaXBzaXMiLCJnZXRTaXplcyIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImhlaWdodCIsImNvbnRlbnQiLCJpbm5lclRleHQiLCJub2RlVmFsdWUiLCJ0ZXh0Q29udGVudCIsImdldFByZXZOb2RlIiwibiIsInByZXZpb3VzU2libGluZyIsIiRlbCIsIiR0b3AiLCJleGNsdWRlQ3VycmVudCIsInAiLCJ0cmltIiwidGV4dCIsImxhc3QiLCJnZXRFbGVtZW50IiwianF1ZXJ5IiwiZ2V0VHJ1ZUlubmVySGVpZ2h0IiwiaCIsInoiLCJwYXJzZUludCIsImNzcyIsImlzTmFOIiwiZm4iLCJkb3Rkb3Rkb3QiLCJkZWJ1ZyIsInNlbGVjdG9yIiwiJGRvdCIsImRhdGEiLCJ0cmlnZ2VyIiwiYXR0ciIsImJpbmRfZXZlbnRzIiwiYmluZCIsImMiLCJyZW1vdmVDbGFzcyIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwib3B0cyIsImNhbGwiLCJ0b2xlcmFuY2UiLCJvcmdDb250ZW50IiwiJGluciIsIndyYXBJbm5lciIsImVuZCIsImNsb25lIiwicmVwbGFjZVdpdGgiLCJib3JkZXIiLCJwYWRkaW5nIiwibWFyZ2luIiwidHJ1bmMiLCJjb25mIiwiYWZ0ZXJFbGVtZW50Iiwic2hvdyIsImlzRnVuY3Rpb24iLCJjYWxsYmFjayIsInVud2F0Y2giLCJ1bmJpbmRfZXZlbnRzIiwidW5iaW5kIiwid2F0Y2giLCIkd2luZG93Iiwid2luZG93IiwiX3dXaWR0aCIsIl93SGVpZ2h0IiwiZG90SWQiLCJ3aW5kb3dSZXNpemVGaXgiLCJ3YXRjaEludCIsImNsZWFySW50ZXJ2YWwiLCJzZXRUaW1lb3V0Iiwid2F0Y2hPcmciLCJzZXRJbnRlcnZhbCIsIndhdGNoTmV3IiwiZXh0ZW5kIiwiZGVmYXVsdHMiLCJBcnJheSIsImRlZmF1bHRBcnJheXMiLCJfb3JnSHRtbCIsImh0bWwiLCJzdHIiLCJhcHBseSIsImFyZ3VtZW50cyIsIl9vcmdUZXh0IiwialF1ZXJ5IiwiV0lER0VUX0NPTU1PTl9DT05GSUciLCJBVVRIX1BBVEhfVVJMIiwiTE9HR0VSX0NMSUVOVF9JRCIsIkxPR0dFUl9DTElFTlRfU0VDUkVUIiwiTE9HR0VSX1JFRlJFU0hfVE9LRU4iLCJTVE9SQUdFX0VOViIsIlNUT1JFX1VSTCIsIlJpc2VWaXNpb24iLCJDb21tb24iLCJVdGlsaXRpZXMiLCJnZXRGb250Q3NzU3R5bGUiLCJjbGFzc05hbWUiLCJmb250T2JqIiwiZmFtaWx5IiwiZm9udCIsImNvbG9yIiwiZm9yZWNvbG9yIiwic2l6ZSIsIndlaWdodCIsImJvbGQiLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJoaWdobGlnaHQiLCJoaWdobGlnaHRDb2xvciIsImJhY2tjb2xvciIsImFkZENTU1J1bGVzIiwicnVsZXMiLCJzdHlsZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImkiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiaGVhZCIsImxvYWRGb250cyIsInNldHRpbmdzIiwiY29udGVudERvYyIsImZvckVhY2giLCJpdGVtIiwiY2xhc3MiLCJmb250U2V0dGluZyIsInR5cGUiLCJ1cmwiLCJsb2FkQ3VzdG9tRm9udCIsImxvYWRHb29nbGVGb250Iiwic2hlZXQiLCJydWxlIiwic3R5bGVTaGVldHMiLCJhZGRSdWxlIiwiZmFtaWx5VmFsIiwic3R5bGVzaGVldCIsInNldEF0dHJpYnV0ZSIsInJlcGxhY2UiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInByZWxvYWRJbWFnZXMiLCJ1cmxzIiwiaW1hZ2VzIiwiSW1hZ2UiLCJzcmMiLCJnZXRRdWVyeVBhcmFtZXRlciIsInBhcmFtIiwicGFpciIsInF1ZXJ5IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJ2YXJzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZ2V0UmlzZUNhY2hlRXJyb3JNZXNzYWdlIiwic3RhdHVzQ29kZSIsImVycm9yTWVzc2FnZSIsIkxvZ2dlclV0aWxzIiwiZ2V0RXZlbnRQYXJhbXMiLCJwYXJhbXMiLCJjYiIsImpzb24iLCJldmVudCIsImZpbGVfdXJsIiwiZmlsZV9mb3JtYXQiLCJnZXRGaWxlRm9ybWF0IiwiY29tcGFueV9pZCIsImNvbXBhbnlJZCIsImRpc3BsYXlfaWQiLCJkaXNwbGF5SWQiLCJnZXRTdWZmaXgiLCJkYXRlIiwiRGF0ZSIsInllYXIiLCJnZXRVVENGdWxsWWVhciIsIm1vbnRoIiwiZ2V0VVRDTW9udGgiLCJkYXkiLCJnZXRVVENEYXRlIiwiaGFzUGFyYW1zIiwic3Vic3RyIiwibGFzdEluZGV4T2YiLCJ0b0xvd2VyQ2FzZSIsImdldEluc2VydERhdGEiLCJCQVNFX0lOU0VSVF9TQ0hFTUEiLCJraW5kIiwic2tpcEludmFsaWRSb3dzIiwiaWdub3JlVW5rbm93blZhbHVlcyIsInRlbXBsYXRlU3VmZml4Iiwicm93cyIsImluc2VydElkIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwicmFuZG9tIiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsInRzIiwidG9JU09TdHJpbmciLCJsb2dFdmVudCIsInRhYmxlIiwiTG9nZ2VyIiwibG9nIiwic2V0SWRzIiwiY29tcGFueSIsImRpc3BsYXkiLCJ1dGlscyIsInJlZnJlc2hUb2tlbiIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwicmVmcmVzaERhdGUiLCJvcGVuIiwiUkVGUkVTSF9VUkwiLCJvbmxvYWRlbmQiLCJyZXNwIiwicmVzcG9uc2UiLCJ0b2tlbiIsImFjY2Vzc190b2tlbiIsInJlZnJlc2hlZEF0Iiwic2VuZCIsImlzVGhyb3R0bGVkIiwidGhyb3R0bGUiLCJsYXN0RXZlbnQiLCJ0YWJsZU5hbWUiLCJpbnNlcnRXaXRoVG9rZW4iLCJyZWZyZXNoRGF0YSIsImluc2VydERhdGEiLCJzZXJ2aWNlVXJsIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc093blByb3BlcnR5IiwidGhyb3R0bGVEZWxheSIsIlJTUyIsImdhZGdldHMiLCJfcmVhZHkiLCJycGMiLCJfcHJlZnMiLCJnZXRTdHJpbmciLCJfZG9uZSIsIl9lcnJvckxvZyIsImZlZWRfdXJsIiwiX2FkZGl0aW9uYWxQYXJhbXMiLCJfbm9GZWVkSXRlbXMiLCJldmVudF9kZXRhaWxzIiwic2hvd0Vycm9yIiwiX2NsZWFyRXJyb3JUaW1lciIsImNsZWFyVGltZW91dCIsIl9lcnJvclRpbWVyIiwiX3N0YXJ0RXJyb3JUaW1lciIsIl9pbml0IiwiX21lc3NhZ2UiLCJNZXNzYWdlIiwiZ2V0RWxlbWVudEJ5SWQiLCJmb250U2V0dGluZ3MiLCJzdG9yeSIsImZvbnRTdHlsZSIsIl8iLCJpc0VtcHR5IiwiaGVhZGxpbmUiLCJwdXNoIiwidGltZXN0YW1wIiwiX3Jpc2Vyc3MiLCJSaXNlUlNTIiwiaW5pdCIsImdldFRhYmxlTmFtZSIsImlzRXJyb3IiLCJvbkNvbnRlbnREb25lIiwib25SaXNlUlNTSW5pdCIsImZlZWQiLCJjb25zb2xlIiwiZGlyIiwiX2NvbnRlbnQiLCJDb250ZW50IiwiaXRlbXMiLCJoaWRlIiwiX2N1cnJlbnRGZWVkIiwiX3ZpZXdlclBhdXNlZCIsInBsYXkiLCJvblJpc2VSU1NSZWZyZXNoIiwidXBkYXRlZCIsImlzRXF1YWwiLCJfZXJyb3JGbGFnIiwidXBkYXRlIiwicGF1c2UiLCJzZXRBZGRpdGlvbmFsUGFyYW1zIiwiYWRkaXRpb25hbFBhcmFtcyIsIlByZWZzIiwiZ2V0SW50IiwibWVzc2FnZSIsInJlc2V0Iiwic3RvcCIsIlV0aWxzIiwic3RyaXBTY3JpcHRzIiwic2NyaXB0cyIsImRpdiIsImlubmVySFRNTCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRydW5jYXRlIiwibWF4TGVuZ3RoIiwicnNzIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJkZXRhaWwiLCJfaW5pdGlhbExvYWQiLCJlcnJvckRldGFpbHMiLCJpc0FycmF5IiwiZXJyb3JfZGV0YWlscyIsIml0ZW1zSW5RdWV1ZSIsImdvIiwicHJlZnMiLCJfY2FjaGUiLCJfJGVsIiwicGFnZSIsIl9nZXRJdGVtSGVpZ2h0IiwiaXRlbXNUb1Nob3ciLCJfaXRlbXMiLCJfZ2V0VHJhbnNpdGlvbkNvbmZpZyIsImluZGV4IiwiY29uZmlnIiwiY3VycmVudEl0ZW1JbmRleCIsIl9nZXRTdGFydENvbmZpZyIsIl9nZXRTdG9yeSIsImhhcyIsImRlc2NyaXB0aW9uIiwiX2dldFRlbXBsYXRlIiwiJHN0b3J5IiwidGVtcGxhdGUiLCIkY29udGVudCIsImNsb25lTm9kZSIsInRpdGxlIiwiZGF0YVNlbGVjdGlvbiIsInNob3dUaXRsZSIsImFsaWduIiwicHViZGF0ZSIsInNob3dUaW1lc3RhbXAiLCJvcHRpb25zIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiX3V0aWxzIiwic2hvd0Rlc2NyaXB0aW9uIiwiaW1wb3J0Tm9kZSIsIl9jbGVhciIsIl90cmFuc2l0aW9uIiwib25lIiwiX2NsZWFyUGFnZSIsIl9zaG93SXRlbSIsIl9tYWtlVHJhbnNpdGlvbiIsInN0YXJ0aW5nSW5kZXgiLCJzdGFydENvbmZpZyIsInRyYW5zQ29uZmlnIiwiX2N1cnJlbnRJdGVtSW5kZXgiLCJfc3RvcFRyYW5zaXRpb25UaW1lciIsIl93YWl0aW5nRm9yVXBkYXRlIiwiX3N0YXJ0VHJhbnNpdGlvblRpbWVyIiwiX3RyYW5zaXRpb25JbnRlcnZhbElkIiwiZHVyYXRpb24iLCJ0cmFuc2l0aW9uIiwibWFpbkNvbnRhaW5lciIsIm1lc3NhZ2VDb250YWluZXIiLCJ3YXJuIiwiX2FjdGl2ZSIsImZpcnN0Q2hpbGQiLCJ2aXNpYmlsaXR5IiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY29uZmlndXJlIiwibmFtZXMiLCJ2YWx1ZXMiLCJ3ZWJDb21wb25lbnRzUmVhZHkiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaWQiLCJyZWdpc3RlciIsIm9uY29udGV4dG1lbnUiLCJib2R5Iiwib25tb3VzZWRvd24iXSwibWFwcGluZ3MiOiJDQWFBLFNBQVdBLEVBQUdDLEdBaVRiLFFBQVNDLEdBQVVDLEVBQU9DLEVBQUdDLEdBRTVCLEdBQUlDLEdBQWFILEVBQU1ELFdBQ3RCSyxHQUFjLENBRWZKLEdBQU1LLE9BRU4sS0FBTSxHQUFJQyxHQUFJLEVBQUdDLEVBQUlKLEVBQVVLLE9BQVlELEVBQUpELEVBQU9BLElBQzlDLENBQ0MsR0FBSUcsR0FBS04sRUFBVU8sR0FBSUosRUFNdkIsSUFMQU4sRUFBTVcsT0FBUUYsR0FDVFAsR0FFSkYsRUFBTVcsT0FBUVQsR0FFVlUsRUFBTVosRUFBT0MsR0FDbEIsQ0FDQ1EsRUFBR0ksU0FDSFQsR0FBYyxDQUNkLE9BSUtGLEdBRUpBLEVBQU1ZLFNBSVQsTUFBT1YsR0FFUixRQUFTVyxHQUFVZixFQUFPZ0IsRUFBSUMsRUFBSWhCLEVBQUdDLEdBRXBDLEdBQUlFLElBQWMsRUFHZGMsRUFB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V0FBVzBJLElBQUk2QyxPQUdqQixRQUFTTSxLQUNQN0wsV0FBVzBJLElBQUltRCxRQUdqQixRQUFTTyxLQUNQcE0sV0FBVzBJLElBQUkwRCxPQUdqQixRQUFTOEUsS0FDUC9TLEVBQU9nVCxvQkFBb0IscUJBQXNCRCxHQUU3Q0UsR0FBYSxLQUFQQSxJQUNSekksRUFBUUUsSUFBSXdJLFNBQVMsY0FBZ0JELEVBQUk3RixHQUN6QzVDLEVBQVFFLElBQUl3SSxTQUFTLGVBQWlCRCxFQUFJdkYsR0FDMUNsRCxFQUFRRSxJQUFJd0ksU0FBUyxjQUFnQkQsRUFBSWhGLEdBQ3pDekQsRUFBUUUsSUFBSXdJLFNBQVMsZUFBaUJELEVBQUlMLEdBQzFDcEksRUFBUUUsSUFBSWhNLEtBQUssR0FBSSxjQUFlLEtBQU11VSxHQUFLLFlBQWEsWUFBYSxzQkE3RDdFLEdBQUk1RCxHQUFRLEdBQUk3RSxHQUFRcUQsTUFDdEJvRixFQUFLNUQsRUFBTXpFLFVBQVUsS0FHdkI1SyxHQUFPbVQsY0FBZ0IsV0FDckIsT0FBTyxHQUdUalEsRUFBU2tRLEtBQUtDLFlBQWMsV0FDMUIsT0FBTyxHQXdEVHJULEVBQU82TyxpQkFBaUIscUJBQXNCa0UsSUFHN0MvUyxPQUFRa0QsU0FBVXNIIiwiZmlsZSI6ImpzL3dpZGdldC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKlx0alF1ZXJ5IGRvdGRvdGRvdCAxLjcuNFxyXG4gKlxyXG4gKlx0Q29weXJpZ2h0IChjKSBGcmVkIEhldXNzY2hlblxyXG4gKlx0d3d3LmZyZWJzaXRlLm5sXHJcbiAqXHJcbiAqXHRQbHVnaW4gd2Vic2l0ZTpcclxuICpcdGRvdGRvdGRvdC5mcmVic2l0ZS5ubFxyXG4gKlxyXG4gKlx0TGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxyXG4gKlx0aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9NSVRfTGljZW5zZVxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiggJCwgdW5kZWYgKVxyXG57XHJcblx0aWYgKCAkLmZuLmRvdGRvdGRvdCApXHJcblx0e1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHJcblx0JC5mbi5kb3Rkb3Rkb3QgPSBmdW5jdGlvbiggbyApXHJcblx0e1xyXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA9PSAwIClcclxuXHRcdHtcclxuXHRcdFx0JC5mbi5kb3Rkb3Rkb3QuZGVidWcoICdObyBlbGVtZW50IGZvdW5kIGZvciBcIicgKyB0aGlzLnNlbGVjdG9yICsgJ1wiLicgKTtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9XHJcblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiB0aGlzLmVhY2goXHJcblx0XHRcdFx0ZnVuY3Rpb24oKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdCQodGhpcykuZG90ZG90ZG90KCBvICk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHR2YXIgJGRvdCA9IHRoaXM7XHJcblxyXG5cdFx0aWYgKCAkZG90LmRhdGEoICdkb3Rkb3Rkb3QnICkgKVxyXG5cdFx0e1xyXG5cdFx0XHQkZG90LnRyaWdnZXIoICdkZXN0cm95LmRvdCcgKTtcclxuXHRcdH1cclxuXHJcblx0XHQkZG90LmRhdGEoICdkb3Rkb3Rkb3Qtc3R5bGUnLCAkZG90LmF0dHIoICdzdHlsZScgKSB8fCAnJyApO1xyXG5cdFx0JGRvdC5jc3MoICd3b3JkLXdyYXAnLCAnYnJlYWstd29yZCcgKTtcclxuXHRcdGlmICgkZG90LmNzcyggJ3doaXRlLXNwYWNlJyApID09PSAnbm93cmFwJylcclxuXHRcdHtcclxuXHRcdFx0JGRvdC5jc3MoICd3aGl0ZS1zcGFjZScsICdub3JtYWwnICk7XHJcblx0XHR9XHJcblxyXG5cdFx0JGRvdC5iaW5kX2V2ZW50cyA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0JGRvdC5iaW5kKFxyXG5cdFx0XHRcdCd1cGRhdGUuZG90JyxcclxuXHRcdFx0XHRmdW5jdGlvbiggZSwgYyApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0JGRvdC5yZW1vdmVDbGFzcyhcImlzLXRydW5jYXRlZFwiKTtcclxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG5cdFx0XHRcdFx0c3dpdGNoKCB0eXBlb2Ygb3B0cy5oZWlnaHQgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRjYXNlICdudW1iZXInOlxyXG5cdFx0XHRcdFx0XHRcdG9wdHMubWF4SGVpZ2h0ID0gb3B0cy5oZWlnaHQ7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdFx0XHRjYXNlICdmdW5jdGlvbic6XHJcblx0XHRcdFx0XHRcdFx0b3B0cy5tYXhIZWlnaHQgPSBvcHRzLmhlaWdodC5jYWxsKCAkZG90WyAwIF0gKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRcdFx0b3B0cy5tYXhIZWlnaHQgPSBnZXRUcnVlSW5uZXJIZWlnaHQoICRkb3QgKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRvcHRzLm1heEhlaWdodCArPSBvcHRzLnRvbGVyYW5jZTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHR5cGVvZiBjICE9ICd1bmRlZmluZWQnIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgYyA9PSAnc3RyaW5nJyB8fCAoJ25vZGVUeXBlJyBpbiBjICYmIGMubm9kZVR5cGUgPT09IDEpIClcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0IFx0XHRjID0gJCgnPGRpdiAvPicpLmFwcGVuZCggYyApLmNvbnRlbnRzKCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKCBjIGluc3RhbmNlb2YgJCApXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRvcmdDb250ZW50ID0gYztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdCRpbnIgPSAkZG90LndyYXBJbm5lciggJzxkaXYgY2xhc3M9XCJkb3Rkb3Rkb3RcIiAvPicgKS5jaGlsZHJlbigpO1xyXG5cdFx0XHRcdFx0JGluci5jb250ZW50cygpXHJcblx0XHRcdFx0XHRcdC5kZXRhY2goKVxyXG5cdFx0XHRcdFx0XHQuZW5kKClcclxuXHRcdFx0XHRcdFx0LmFwcGVuZCggb3JnQ29udGVudC5jbG9uZSggdHJ1ZSApIClcclxuXHRcdFx0XHRcdFx0LmZpbmQoICdicicgKVxyXG5cdFx0XHRcdFx0XHQucmVwbGFjZVdpdGgoICcgIDxiciAvPiAgJyApXHJcblx0XHRcdFx0XHRcdC5lbmQoKVxyXG5cdFx0XHRcdFx0XHQuY3NzKHtcclxuXHRcdFx0XHRcdFx0XHQnaGVpZ2h0J1x0OiAnYXV0bycsXHJcblx0XHRcdFx0XHRcdFx0J3dpZHRoJ1x0XHQ6ICdhdXRvJyxcclxuXHRcdFx0XHRcdFx0XHQnYm9yZGVyJ1x0OiAnbm9uZScsXHJcblx0XHRcdFx0XHRcdFx0J3BhZGRpbmcnXHQ6IDAsXHJcblx0XHRcdFx0XHRcdFx0J21hcmdpbidcdDogMFxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0XHR2YXIgYWZ0ZXIgPSBmYWxzZSxcclxuXHRcdFx0XHRcdFx0dHJ1bmMgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIGNvbmYuYWZ0ZXJFbGVtZW50IClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0YWZ0ZXIgPSBjb25mLmFmdGVyRWxlbWVudC5jbG9uZSggdHJ1ZSApO1xyXG5cdFx0XHRcdFx0ICAgIGFmdGVyLnNob3coKTtcclxuXHRcdFx0XHRcdFx0Y29uZi5hZnRlckVsZW1lbnQuZGV0YWNoKCk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0ZXN0KCAkaW5yLCBvcHRzICkgKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRpZiAoIG9wdHMud3JhcCA9PSAnY2hpbGRyZW4nIClcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHRydW5jID0gY2hpbGRyZW4oICRpbnIsIG9wdHMsIGFmdGVyICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dHJ1bmMgPSBlbGxpcHNpcyggJGluciwgJGRvdCwgJGluciwgb3B0cywgYWZ0ZXIgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0JGluci5yZXBsYWNlV2l0aCggJGluci5jb250ZW50cygpICk7XHJcblx0XHRcdFx0XHQkaW5yID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHRpZiAoICQuaXNGdW5jdGlvbiggb3B0cy5jYWxsYmFjayApIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0b3B0cy5jYWxsYmFjay5jYWxsKCAkZG90WyAwIF0sIHRydW5jLCBvcmdDb250ZW50ICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Y29uZi5pc1RydW5jYXRlZCA9IHRydW5jO1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRydW5jO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdCkuYmluZChcclxuXHRcdFx0XHQnaXNUcnVuY2F0ZWQuZG90JyxcclxuXHRcdFx0XHRmdW5jdGlvbiggZSwgZm4gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGZuLmNhbGwoICRkb3RbIDAgXSwgY29uZi5pc1RydW5jYXRlZCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIGNvbmYuaXNUcnVuY2F0ZWQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0KS5iaW5kKFxyXG5cdFx0XHRcdCdvcmlnaW5hbENvbnRlbnQuZG90JyxcclxuXHRcdFx0XHRmdW5jdGlvbiggZSwgZm4gKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGZuLmNhbGwoICRkb3RbIDAgXSwgb3JnQ29udGVudCApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIG9yZ0NvbnRlbnQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0KS5iaW5kKFxyXG5cdFx0XHRcdCdkZXN0cm95LmRvdCcsXHJcblx0XHRcdFx0ZnVuY3Rpb24oIGUgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG5cdFx0XHRcdFx0JGRvdC51bndhdGNoKClcclxuXHRcdFx0XHRcdFx0LnVuYmluZF9ldmVudHMoKVxyXG5cdFx0XHRcdFx0XHQuY29udGVudHMoKVxyXG5cdFx0XHRcdFx0XHQuZGV0YWNoKClcclxuXHRcdFx0XHRcdFx0LmVuZCgpXHJcblx0XHRcdFx0XHRcdC5hcHBlbmQoIG9yZ0NvbnRlbnQgKVxyXG5cdFx0XHRcdFx0XHQuYXR0ciggJ3N0eWxlJywgJGRvdC5kYXRhKCAnZG90ZG90ZG90LXN0eWxlJyApIHx8ICcnIClcclxuXHRcdFx0XHRcdFx0LmRhdGEoICdkb3Rkb3Rkb3QnLCBmYWxzZSApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0KTtcclxuXHRcdFx0cmV0dXJuICRkb3Q7XHJcblx0XHR9O1x0Ly9cdC9iaW5kX2V2ZW50c1xyXG5cclxuXHRcdCRkb3QudW5iaW5kX2V2ZW50cyA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0JGRvdC51bmJpbmQoJy5kb3QnKTtcclxuXHRcdFx0cmV0dXJuICRkb3Q7XHJcblx0XHR9O1x0Ly9cdC91bmJpbmRfZXZlbnRzXHJcblxyXG5cdFx0JGRvdC53YXRjaCA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0JGRvdC51bndhdGNoKCk7XHJcblx0XHRcdGlmICggb3B0cy53YXRjaCA9PSAnd2luZG93JyApXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgJHdpbmRvdyA9ICQod2luZG93KSxcclxuXHRcdFx0XHRcdF93V2lkdGggPSAkd2luZG93LndpZHRoKCksXHJcblx0XHRcdFx0XHRfd0hlaWdodCA9ICR3aW5kb3cuaGVpZ2h0KCk7XHJcblxyXG5cdFx0XHRcdCR3aW5kb3cuYmluZChcclxuXHRcdFx0XHRcdCdyZXNpemUuZG90JyArIGNvbmYuZG90SWQsXHJcblx0XHRcdFx0XHRmdW5jdGlvbigpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGlmICggX3dXaWR0aCAhPSAkd2luZG93LndpZHRoKCkgfHwgX3dIZWlnaHQgIT0gJHdpbmRvdy5oZWlnaHQoKSB8fCAhb3B0cy53aW5kb3dSZXNpemVGaXggKVxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0X3dXaWR0aCA9ICR3aW5kb3cud2lkdGgoKTtcclxuXHRcdFx0XHRcdFx0XHRfd0hlaWdodCA9ICR3aW5kb3cuaGVpZ2h0KCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGlmICggd2F0Y2hJbnQgKVxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoIHdhdGNoSW50ICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdHdhdGNoSW50ID0gc2V0VGltZW91dChcclxuXHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKClcclxuXHRcdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdFx0JGRvdC50cmlnZ2VyKCAndXBkYXRlLmRvdCcgKTtcclxuXHRcdFx0XHRcdFx0XHRcdH0sIDEwMFxyXG5cdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHdhdGNoT3JnID0gZ2V0U2l6ZXMoICRkb3QgKTtcclxuXHRcdFx0XHR3YXRjaEludCA9IHNldEludGVydmFsKFxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRpZiAoICRkb3QuaXMoICc6dmlzaWJsZScgKSApXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgd2F0Y2hOZXcgPSBnZXRTaXplcyggJGRvdCApO1xyXG5cdFx0XHRcdFx0XHRcdGlmICggd2F0Y2hPcmcud2lkdGggICE9IHdhdGNoTmV3LndpZHRoIHx8XHJcblx0XHRcdFx0XHRcdFx0XHQgd2F0Y2hPcmcuaGVpZ2h0ICE9IHdhdGNoTmV3LmhlaWdodCApXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0JGRvdC50cmlnZ2VyKCAndXBkYXRlLmRvdCcgKTtcclxuXHRcdFx0XHRcdFx0XHRcdHdhdGNoT3JnID0gd2F0Y2hOZXc7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LCA1MDBcclxuXHRcdFx0XHQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiAkZG90O1xyXG5cdFx0fTtcclxuXHRcdCRkb3QudW53YXRjaCA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0JCh3aW5kb3cpLnVuYmluZCggJ3Jlc2l6ZS5kb3QnICsgY29uZi5kb3RJZCApO1xyXG5cdFx0XHRpZiAoIHdhdGNoSW50IClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNsZWFySW50ZXJ2YWwoIHdhdGNoSW50ICk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuICRkb3Q7XHJcblx0XHR9O1xyXG5cclxuXHRcdHZhclx0b3JnQ29udGVudFx0PSAkZG90LmNvbnRlbnRzKCksXHJcblx0XHRcdG9wdHMgXHRcdD0gJC5leHRlbmQoIHRydWUsIHt9LCAkLmZuLmRvdGRvdGRvdC5kZWZhdWx0cywgbyApLFxyXG5cdFx0XHRjb25mXHRcdD0ge30sXHJcblx0XHRcdHdhdGNoT3JnXHQ9IHt9LFxyXG5cdFx0XHR3YXRjaEludFx0PSBudWxsLFxyXG5cdFx0XHQkaW5yXHRcdD0gbnVsbDtcclxuXHJcblxyXG5cdFx0aWYgKCAhKCBvcHRzLmxhc3RDaGFyYWN0ZXIucmVtb3ZlIGluc3RhbmNlb2YgQXJyYXkgKSApXHJcblx0XHR7XHJcblx0XHRcdG9wdHMubGFzdENoYXJhY3Rlci5yZW1vdmUgPSAkLmZuLmRvdGRvdGRvdC5kZWZhdWx0QXJyYXlzLmxhc3RDaGFyYWN0ZXIucmVtb3ZlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCAhKCBvcHRzLmxhc3RDaGFyYWN0ZXIubm9FbGxpcHNpcyBpbnN0YW5jZW9mIEFycmF5ICkgKVxyXG5cdFx0e1xyXG5cdFx0XHRvcHRzLmxhc3RDaGFyYWN0ZXIubm9FbGxpcHNpcyA9ICQuZm4uZG90ZG90ZG90LmRlZmF1bHRBcnJheXMubGFzdENoYXJhY3Rlci5ub0VsbGlwc2lzO1xyXG5cdFx0fVxyXG5cclxuXHJcblx0XHRjb25mLmFmdGVyRWxlbWVudFx0PSBnZXRFbGVtZW50KCBvcHRzLmFmdGVyLCAkZG90ICk7XHJcblx0XHRjb25mLmlzVHJ1bmNhdGVkXHQ9IGZhbHNlO1xyXG5cdFx0Y29uZi5kb3RJZFx0XHRcdD0gZG90SWQrKztcclxuXHJcblxyXG5cdFx0JGRvdC5kYXRhKCAnZG90ZG90ZG90JywgdHJ1ZSApXHJcblx0XHRcdC5iaW5kX2V2ZW50cygpXHJcblx0XHRcdC50cmlnZ2VyKCAndXBkYXRlLmRvdCcgKTtcclxuXHJcblx0XHRpZiAoIG9wdHMud2F0Y2ggKVxyXG5cdFx0e1xyXG5cdFx0XHQkZG90LndhdGNoKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuICRkb3Q7XHJcblx0fTtcclxuXHJcblxyXG5cdC8vXHRwdWJsaWNcclxuXHQkLmZuLmRvdGRvdGRvdC5kZWZhdWx0cyA9IHtcclxuXHRcdCdlbGxpcHNpcydcdFx0XHQ6ICcuLi4gJyxcclxuXHRcdCd3cmFwJ1x0XHRcdFx0OiAnd29yZCcsXHJcblx0XHQnZmFsbGJhY2tUb0xldHRlcidcdDogdHJ1ZSxcclxuXHRcdCdsYXN0Q2hhcmFjdGVyJ1x0XHQ6IHt9LFxyXG5cdFx0J3RvbGVyYW5jZSdcdFx0XHQ6IDAsXHJcblx0XHQnY2FsbGJhY2snXHRcdFx0OiBudWxsLFxyXG5cdFx0J2FmdGVyJ1x0XHRcdFx0OiBudWxsLFxyXG5cdFx0J2hlaWdodCdcdFx0XHQ6IG51bGwsXHJcblx0XHQnd2F0Y2gnXHRcdFx0XHQ6IGZhbHNlLFxyXG5cdFx0J3dpbmRvd1Jlc2l6ZUZpeCdcdDogdHJ1ZVxyXG5cdH07XHJcblx0JC5mbi5kb3Rkb3Rkb3QuZGVmYXVsdEFycmF5cyA9IHtcclxuXHRcdCdsYXN0Q2hhcmFjdGVyJ1x0XHQ6IHtcclxuXHRcdFx0J3JlbW92ZSdcdFx0XHQ6IFsgJyAnLCAnXFx1MzAwMCcsICcsJywgJzsnLCAnLicsICchJywgJz8nIF0sXHJcblx0XHRcdCdub0VsbGlwc2lzJ1x0XHQ6IFtdXHJcblx0XHR9XHJcblx0fTtcclxuXHQkLmZuLmRvdGRvdGRvdC5kZWJ1ZyA9IGZ1bmN0aW9uKCBtc2cgKSB7fTtcclxuXHJcblxyXG5cdC8vXHRwcml2YXRlXHJcblx0dmFyIGRvdElkID0gMTtcclxuXHJcblx0ZnVuY3Rpb24gY2hpbGRyZW4oICRlbGVtLCBvLCBhZnRlciApXHJcblx0e1xyXG5cdFx0dmFyICRlbGVtZW50cyBcdD0gJGVsZW0uY2hpbGRyZW4oKSxcclxuXHRcdFx0aXNUcnVuY2F0ZWRcdD0gZmFsc2U7XHJcblxyXG5cdFx0JGVsZW0uZW1wdHkoKTtcclxuXHJcblx0XHRmb3IgKCB2YXIgYSA9IDAsIGwgPSAkZWxlbWVudHMubGVuZ3RoOyBhIDwgbDsgYSsrIClcclxuXHRcdHtcclxuXHRcdFx0dmFyICRlID0gJGVsZW1lbnRzLmVxKCBhICk7XHJcblx0XHRcdCRlbGVtLmFwcGVuZCggJGUgKTtcclxuXHRcdFx0aWYgKCBhZnRlciApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQkZWxlbS5hcHBlbmQoIGFmdGVyICk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCB0ZXN0KCAkZWxlbSwgbyApIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdCRlLnJlbW92ZSgpO1xyXG5cdFx0XHRcdGlzVHJ1bmNhdGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZiAoIGFmdGVyIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRhZnRlci5kZXRhY2goKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBpc1RydW5jYXRlZDtcclxuXHR9XHJcblx0ZnVuY3Rpb24gZWxsaXBzaXMoICRlbGVtLCAkZCwgJGksIG8sIGFmdGVyIClcclxuXHR7XHJcblx0XHR2YXIgaXNUcnVuY2F0ZWRcdD0gZmFsc2U7XHJcblxyXG5cdFx0Ly9cdERvbid0IHB1dCB0aGUgZWxsaXBzaXMgZGlyZWN0bHkgaW5zaWRlIHRoZXNlIGVsZW1lbnRzXHJcblx0XHR2YXIgbm90eCA9ICdhLCB0YWJsZSwgdGhlYWQsIHRib2R5LCB0Zm9vdCwgdHIsIGNvbCwgY29sZ3JvdXAsIG9iamVjdCwgZW1iZWQsIHBhcmFtLCBvbCwgdWwsIGRsLCBibG9ja3F1b3RlLCBzZWxlY3QsIG9wdGdyb3VwLCBvcHRpb24sIHRleHRhcmVhLCBzY3JpcHQsIHN0eWxlJztcclxuXHJcblx0XHQvL1x0RG9uJ3QgcmVtb3ZlIHRoZXNlIGVsZW1lbnRzIGV2ZW4gaWYgdGhleSBhcmUgYWZ0ZXIgdGhlIGVsbGlwc2lzXHJcblx0XHR2YXIgbm90eSA9ICdzY3JpcHQsIC5kb3Rkb3Rkb3Qta2VlcCc7XHJcblxyXG5cdFx0JGVsZW1cclxuXHRcdFx0LmNvbnRlbnRzKClcclxuXHRcdFx0LmRldGFjaCgpXHJcblx0XHRcdC5lYWNoKFxyXG5cdFx0XHRcdGZ1bmN0aW9uKClcclxuXHRcdFx0XHR7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGVcdD0gdGhpcyxcclxuXHRcdFx0XHRcdFx0JGVcdD0gJChlKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoIHR5cGVvZiBlID09ICd1bmRlZmluZWQnIClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIGlmICggJGUuaXMoIG5vdHkgKSApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdCRlbGVtLmFwcGVuZCggJGUgKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgaWYgKCBpc1RydW5jYXRlZCApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHQkZWxlbS5hcHBlbmQoICRlICk7XHJcblx0XHRcdFx0XHRcdGlmICggYWZ0ZXIgJiYgISRlLmlzKCBvLmFmdGVyICkgJiYgISRlLmZpbmQoIG8uYWZ0ZXIgKS5sZW5ndGggIClcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdCRlbGVtWyAkZWxlbS5pcyggbm90eCApID8gJ2FmdGVyJyA6ICdhcHBlbmQnIF0oIGFmdGVyICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKCB0ZXN0KCAkaSwgbyApIClcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdGlmICggZS5ub2RlVHlwZSA9PSAzICkgLy8gbm9kZSBpcyBURVhUXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0aXNUcnVuY2F0ZWQgPSBlbGxpcHNpc0VsZW1lbnQoICRlLCAkZCwgJGksIG8sIGFmdGVyICk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0XHRpc1RydW5jYXRlZCA9IGVsbGlwc2lzKCAkZSwgJGQsICRpLCBvLCBhZnRlciApO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdFx0aWYgKCAhaXNUcnVuY2F0ZWQgKVxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdCRlLmRldGFjaCgpO1xyXG5cdFx0XHRcdFx0XHRcdFx0aXNUcnVuY2F0ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCAhaXNUcnVuY2F0ZWQgKVxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0aWYgKCBhZnRlciApXHJcblx0XHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdFx0YWZ0ZXIuZGV0YWNoKCk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdFx0JGQuYWRkQ2xhc3MoXCJpcy10cnVuY2F0ZWRcIik7XHJcblx0XHRyZXR1cm4gaXNUcnVuY2F0ZWQ7XHJcblx0fVxyXG5cdGZ1bmN0aW9uIGVsbGlwc2lzRWxlbWVudCggJGUsICRkLCAkaSwgbywgYWZ0ZXIgKVxyXG5cdHtcclxuXHRcdHZhciBlID0gJGVbIDAgXTtcclxuXHJcblx0XHRpZiAoICFlIClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB0eHRcdFx0XHQ9IGdldFRleHRDb250ZW50KCBlICksXHJcblx0XHRcdHNwYWNlXHRcdD0gKCB0eHQuaW5kZXhPZignICcpICE9PSAtMSApID8gJyAnIDogJ1xcdTMwMDAnLFxyXG5cdFx0XHRzZXBhcmF0b3JcdD0gKCBvLndyYXAgPT0gJ2xldHRlcicgKSA/ICcnIDogc3BhY2UsXHJcblx0XHRcdHRleHRBcnJcdFx0PSB0eHQuc3BsaXQoIHNlcGFyYXRvciApLFxyXG5cdFx0XHRwb3NpdGlvbiBcdD0gLTEsXHJcblx0XHRcdG1pZFBvc1x0XHQ9IC0xLFxyXG5cdFx0XHRzdGFydFBvc1x0PSAwLFxyXG5cdFx0XHRlbmRQb3NcdFx0PSB0ZXh0QXJyLmxlbmd0aCAtIDE7XHJcblxyXG5cclxuXHRcdC8vXHRPbmx5IG9uZSB3b3JkXHJcblx0XHRpZiAoIG8uZmFsbGJhY2tUb0xldHRlciAmJiBzdGFydFBvcyA9PSAwICYmIGVuZFBvcyA9PSAwIClcclxuXHRcdHtcclxuXHRcdFx0c2VwYXJhdG9yXHQ9ICcnO1xyXG5cdFx0XHR0ZXh0QXJyXHRcdD0gdHh0LnNwbGl0KCBzZXBhcmF0b3IgKTtcclxuXHRcdFx0ZW5kUG9zXHRcdD0gdGV4dEFyci5sZW5ndGggLSAxO1xyXG5cdFx0fVxyXG5cclxuXHRcdHdoaWxlICggc3RhcnRQb3MgPD0gZW5kUG9zICYmICEoIHN0YXJ0UG9zID09IDAgJiYgZW5kUG9zID09IDAgKSApXHJcblx0XHR7XHJcblx0XHRcdHZhciBtID0gTWF0aC5mbG9vciggKCBzdGFydFBvcyArIGVuZFBvcyApIC8gMiApO1xyXG5cdFx0XHRpZiAoIG0gPT0gbWlkUG9zIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdG1pZFBvcyA9IG07XHJcblxyXG5cdFx0XHRzZXRUZXh0Q29udGVudCggZSwgdGV4dEFyci5zbGljZSggMCwgbWlkUG9zICsgMSApLmpvaW4oIHNlcGFyYXRvciApICsgby5lbGxpcHNpcyApO1xyXG5cdFx0XHQkaS5jaGlsZHJlbigpXHJcblx0XHRcdFx0LmVhY2goXHJcblx0XHRcdFx0XHRmdW5jdGlvbigpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdCQodGhpcykudG9nZ2xlKCkudG9nZ2xlKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdGlmICggIXRlc3QoICRpLCBvICkgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cG9zaXRpb24gPSBtaWRQb3M7XHJcblx0XHRcdFx0c3RhcnRQb3MgPSBtaWRQb3M7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZW5kUG9zID0gbWlkUG9zO1xyXG5cclxuXHRcdFx0XHQvL1x0RmFsbGJhY2sgdG8gbGV0dGVyXHJcblx0XHRcdFx0aWYgKG8uZmFsbGJhY2tUb0xldHRlciAmJiBzdGFydFBvcyA9PSAwICYmIGVuZFBvcyA9PSAwIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzZXBhcmF0b3JcdD0gJyc7XHJcblx0XHRcdFx0XHR0ZXh0QXJyXHRcdD0gdGV4dEFyclsgMCBdLnNwbGl0KCBzZXBhcmF0b3IgKTtcclxuXHRcdFx0XHRcdHBvc2l0aW9uXHQ9IC0xO1xyXG5cdFx0XHRcdFx0bWlkUG9zXHRcdD0gLTE7XHJcblx0XHRcdFx0XHRzdGFydFBvc1x0PSAwO1xyXG5cdFx0XHRcdFx0ZW5kUG9zXHRcdD0gdGV4dEFyci5sZW5ndGggLSAxO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggcG9zaXRpb24gIT0gLTEgJiYgISggdGV4dEFyci5sZW5ndGggPT0gMSAmJiB0ZXh0QXJyWyAwIF0ubGVuZ3RoID09IDAgKSApXHJcblx0XHR7XHJcblx0XHRcdHR4dCA9IGFkZEVsbGlwc2lzKCB0ZXh0QXJyLnNsaWNlKCAwLCBwb3NpdGlvbiArIDEgKS5qb2luKCBzZXBhcmF0b3IgKSwgbyApO1xyXG5cdFx0XHRzZXRUZXh0Q29udGVudCggZSwgdHh0ICk7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdHZhciAkdyA9ICRlLnBhcmVudCgpO1xyXG5cdFx0XHQkZS5kZXRhY2goKTtcclxuXHJcblx0XHRcdHZhciBhZnRlckxlbmd0aCA9ICggYWZ0ZXIgJiYgYWZ0ZXIuY2xvc2VzdCgkdykubGVuZ3RoICkgPyBhZnRlci5sZW5ndGggOiAwO1xyXG5cclxuXHRcdFx0aWYgKCAkdy5jb250ZW50cygpLmxlbmd0aCA+IGFmdGVyTGVuZ3RoIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGUgPSBmaW5kTGFzdFRleHROb2RlKCAkdy5jb250ZW50cygpLmVxKCAtMSAtIGFmdGVyTGVuZ3RoICksICRkICk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZSA9IGZpbmRMYXN0VGV4dE5vZGUoICR3LCAkZCwgdHJ1ZSApO1xyXG5cdFx0XHRcdGlmICggIWFmdGVyTGVuZ3RoIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHQkdy5kZXRhY2goKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCBlIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHR4dCA9IGFkZEVsbGlwc2lzKCBnZXRUZXh0Q29udGVudCggZSApLCBvICk7XHJcblx0XHRcdFx0c2V0VGV4dENvbnRlbnQoIGUsIHR4dCApO1xyXG5cdFx0XHRcdGlmICggYWZ0ZXJMZW5ndGggJiYgYWZ0ZXIgKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdCQoZSkucGFyZW50KCkuYXBwZW5kKCBhZnRlciApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHRmdW5jdGlvbiB0ZXN0KCAkaSwgbyApXHJcblx0e1xyXG5cdFx0cmV0dXJuICRpLmlubmVySGVpZ2h0KCkgPiBvLm1heEhlaWdodDtcclxuXHR9XHJcblx0ZnVuY3Rpb24gYWRkRWxsaXBzaXMoIHR4dCwgbyApXHJcblx0e1xyXG5cdFx0d2hpbGUoICQuaW5BcnJheSggdHh0LnNsaWNlKCAtMSApLCBvLmxhc3RDaGFyYWN0ZXIucmVtb3ZlICkgPiAtMSApXHJcblx0XHR7XHJcblx0XHRcdHR4dCA9IHR4dC5zbGljZSggMCwgLTEgKTtcclxuXHRcdH1cclxuXHRcdGlmICggJC5pbkFycmF5KCB0eHQuc2xpY2UoIC0xICksIG8ubGFzdENoYXJhY3Rlci5ub0VsbGlwc2lzICkgPCAwIClcclxuXHRcdHtcclxuXHRcdFx0dHh0ICs9IG8uZWxsaXBzaXM7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdHh0O1xyXG5cdH1cclxuXHRmdW5jdGlvbiBnZXRTaXplcyggJGQgKVxyXG5cdHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdCd3aWR0aCdcdDogJGQuaW5uZXJXaWR0aCgpLFxyXG5cdFx0XHQnaGVpZ2h0JzogJGQuaW5uZXJIZWlnaHQoKVxyXG5cdFx0fTtcclxuXHR9XHJcblx0ZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQoIGUsIGNvbnRlbnQgKVxyXG5cdHtcclxuXHRcdGlmICggZS5pbm5lclRleHQgKVxyXG5cdFx0e1xyXG5cdFx0XHRlLmlubmVyVGV4dCA9IGNvbnRlbnQ7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICggZS5ub2RlVmFsdWUgKVxyXG5cdFx0e1xyXG5cdFx0XHRlLm5vZGVWYWx1ZSA9IGNvbnRlbnQ7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmIChlLnRleHRDb250ZW50KVxyXG5cdFx0e1xyXG5cdFx0XHRlLnRleHRDb250ZW50ID0gY29udGVudDtcclxuXHRcdH1cclxuXHJcblx0fVxyXG5cdGZ1bmN0aW9uIGdldFRleHRDb250ZW50KCBlIClcclxuXHR7XHJcblx0XHRpZiAoIGUuaW5uZXJUZXh0IClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIGUuaW5uZXJUZXh0O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIGUubm9kZVZhbHVlIClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIGUubm9kZVZhbHVlO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAoIGUudGV4dENvbnRlbnQgKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gZS50ZXh0Q29udGVudDtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIFwiXCI7XHJcblx0XHR9XHJcblx0fVxyXG5cdGZ1bmN0aW9uIGdldFByZXZOb2RlKCBuIClcclxuXHR7XHJcblx0XHRkb1xyXG5cdFx0e1xyXG5cdFx0XHRuID0gbi5wcmV2aW91c1NpYmxpbmc7XHJcblx0XHR9XHJcblx0XHR3aGlsZSAoIG4gJiYgbi5ub2RlVHlwZSAhPT0gMSAmJiBuLm5vZGVUeXBlICE9PSAzICk7XHJcblxyXG5cdFx0cmV0dXJuIG47XHJcblx0fVxyXG5cdGZ1bmN0aW9uIGZpbmRMYXN0VGV4dE5vZGUoICRlbCwgJHRvcCwgZXhjbHVkZUN1cnJlbnQgKVxyXG5cdHtcclxuXHRcdHZhciBlID0gJGVsICYmICRlbFsgMCBdLCBwO1xyXG5cdFx0aWYgKCBlIClcclxuXHRcdHtcclxuXHRcdFx0aWYgKCAhZXhjbHVkZUN1cnJlbnQgKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYgKCBlLm5vZGVUeXBlID09PSAzIClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXR1cm4gZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKCAkLnRyaW0oICRlbC50ZXh0KCkgKSApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZpbmRMYXN0VGV4dE5vZGUoICRlbC5jb250ZW50cygpLmxhc3QoKSwgJHRvcCApO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRwID0gZ2V0UHJldk5vZGUoIGUgKTtcclxuXHRcdFx0d2hpbGUgKCAhcCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHQkZWwgPSAkZWwucGFyZW50KCk7XHJcblx0XHRcdFx0aWYgKCAkZWwuaXMoICR0b3AgKSB8fCAhJGVsLmxlbmd0aCApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRwID0gZ2V0UHJldk5vZGUoICRlbFswXSApO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICggcCApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gZmluZExhc3RUZXh0Tm9kZSggJChwKSwgJHRvcCApO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cdGZ1bmN0aW9uIGdldEVsZW1lbnQoIGUsICRpIClcclxuXHR7XHJcblx0XHRpZiAoICFlIClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCB0eXBlb2YgZSA9PT0gJ3N0cmluZycgKVxyXG5cdFx0e1xyXG5cdFx0XHRlID0gJChlLCAkaSk7XHJcblx0XHRcdHJldHVybiAoIGUubGVuZ3RoIClcclxuXHRcdFx0XHQ/IGVcclxuXHRcdFx0XHQ6IGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuICFlLmpxdWVyeVxyXG5cdFx0XHQ/IGZhbHNlXHJcblx0XHRcdDogZTtcclxuXHR9XHJcblx0ZnVuY3Rpb24gZ2V0VHJ1ZUlubmVySGVpZ2h0KCAkZWwgKVxyXG5cdHtcclxuXHRcdHZhciBoID0gJGVsLmlubmVySGVpZ2h0KCksXHJcblx0XHRcdGEgPSBbICdwYWRkaW5nVG9wJywgJ3BhZGRpbmdCb3R0b20nIF07XHJcblxyXG5cdFx0Zm9yICggdmFyIHogPSAwLCBsID0gYS5sZW5ndGg7IHogPCBsOyB6KysgKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgbSA9IHBhcnNlSW50KCAkZWwuY3NzKCBhWyB6IF0gKSwgMTAgKTtcclxuXHRcdFx0aWYgKCBpc05hTiggbSApIClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG0gPSAwO1xyXG5cdFx0XHR9XHJcblx0XHRcdGggLT0gbTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBoO1xyXG5cdH1cclxuXHJcblxyXG5cdC8vXHRvdmVycmlkZSBqUXVlcnkuaHRtbFxyXG5cdHZhciBfb3JnSHRtbCA9ICQuZm4uaHRtbDtcclxuXHQkLmZuLmh0bWwgPSBmdW5jdGlvbiggc3RyIClcclxuXHR7XHJcblx0XHRpZiAoIHN0ciAhPSB1bmRlZiAmJiAhJC5pc0Z1bmN0aW9uKCBzdHIgKSAmJiB0aGlzLmRhdGEoICdkb3Rkb3Rkb3QnICkgKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy50cmlnZ2VyKCAndXBkYXRlJywgWyBzdHIgXSApO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIF9vcmdIdG1sLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcclxuXHR9O1xyXG5cclxuXHJcblx0Ly9cdG92ZXJyaWRlIGpRdWVyeS50ZXh0XHJcblx0dmFyIF9vcmdUZXh0ID0gJC5mbi50ZXh0O1xyXG5cdCQuZm4udGV4dCA9IGZ1bmN0aW9uKCBzdHIgKVxyXG5cdHtcclxuXHRcdGlmICggc3RyICE9IHVuZGVmICYmICEkLmlzRnVuY3Rpb24oIHN0ciApICYmIHRoaXMuZGF0YSggJ2RvdGRvdGRvdCcgKSApXHJcblx0XHR7XHJcblx0XHRcdHN0ciA9ICQoICc8ZGl2IC8+JyApLnRleHQoIHN0ciApLmh0bWwoKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMudHJpZ2dlciggJ3VwZGF0ZScsIFsgc3RyIF0gKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBfb3JnVGV4dC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XHJcblx0fTtcclxuXHJcblxyXG59KSggalF1ZXJ5ICk7XHJcblxudmFyIFdJREdFVF9DT01NT05fQ09ORklHID0ge1xuICBBVVRIX1BBVEhfVVJMOiBcInYxL3dpZGdldC9hdXRoXCIsXG4gIExPR0dFUl9DTElFTlRfSUQ6IFwiMTA4ODUyNzE0NzEwOS02cTFvMnZ0aWhuMzQyOTJwanQ0Y2tobWhjazByazBvNy5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbVwiLFxuICBMT0dHRVJfQ0xJRU5UX1NFQ1JFVDogXCJubFp5cmNQTGc2b0V3TzlmOVdmbjI5V2hcIixcbiAgTE9HR0VSX1JFRlJFU0hfVE9LRU46IFwiMS94enQ0a3d6RTFIN1c5Vm5LQjhjQWFDeDZ6YjRFczRuS0VvcWFZSGRURDE1SWdPckpEdGR1bjZ6SzZYaUFUQ0tUXCIsXG4gIFNUT1JBR0VfRU5WOiBcInByb2RcIixcbiAgU1RPUkVfVVJMOiBcImh0dHBzOi8vc3RvcmUtZG90LXJ2YXNlcnZlcjIuYXBwc3BvdC5jb20vXCJcbn07XG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcyA9IChmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBnZXRGb250Q3NzU3R5bGUoY2xhc3NOYW1lLCBmb250T2JqKSB7XG4gICAgdmFyIGZhbWlseSA9IFwiZm9udC1mYW1pbHk6XCIgKyBmb250T2JqLmZvbnQuZmFtaWx5ICsgXCI7IFwiO1xuICAgIHZhciBjb2xvciA9IFwiY29sb3I6IFwiICsgKGZvbnRPYmouY29sb3IgPyBmb250T2JqLmNvbG9yIDogZm9udE9iai5mb3JlY29sb3IpICsgXCI7IFwiO1xuICAgIHZhciBzaXplID0gXCJmb250LXNpemU6IFwiICsgKGZvbnRPYmouc2l6ZS5pbmRleE9mKFwicHhcIikgPT09IC0xID8gZm9udE9iai5zaXplICsgXCJweDsgXCIgOiBmb250T2JqLnNpemUgKyBcIjsgXCIpO1xuICAgIHZhciB3ZWlnaHQgPSBcImZvbnQtd2VpZ2h0OiBcIiArIChmb250T2JqLmJvbGQgPyBcImJvbGRcIiA6IFwibm9ybWFsXCIpICsgXCI7IFwiO1xuICAgIHZhciBpdGFsaWMgPSBcImZvbnQtc3R5bGU6IFwiICsgKGZvbnRPYmouaXRhbGljID8gXCJpdGFsaWNcIiA6IFwibm9ybWFsXCIpICsgXCI7IFwiO1xuICAgIHZhciB1bmRlcmxpbmUgPSBcInRleHQtZGVjb3JhdGlvbjogXCIgKyAoZm9udE9iai51bmRlcmxpbmUgPyBcInVuZGVybGluZVwiIDogXCJub25lXCIpICsgXCI7IFwiO1xuICAgIHZhciBoaWdobGlnaHQgPSBcImJhY2tncm91bmQtY29sb3I6IFwiICsgKGZvbnRPYmouaGlnaGxpZ2h0Q29sb3IgPyBmb250T2JqLmhpZ2hsaWdodENvbG9yIDogZm9udE9iai5iYWNrY29sb3IpICsgXCI7IFwiO1xuXG4gICAgcmV0dXJuIFwiLlwiICsgY2xhc3NOYW1lICsgXCIge1wiICsgZmFtaWx5ICsgY29sb3IgKyBzaXplICsgd2VpZ2h0ICsgaXRhbGljICsgdW5kZXJsaW5lICsgaGlnaGxpZ2h0ICsgXCJ9XCI7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRDU1NSdWxlcyhydWxlcykge1xuICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBydWxlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocnVsZXNbaV0pKTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIC8qXG4gICAqIExvYWRzIEdvb2dsZSBvciBjdXN0b20gZm9udHMsIGlmIGFwcGxpY2FibGUsIGFuZCBpbmplY3RzIENTUyBzdHlsZXNcbiAgICogaW50byB0aGUgaGVhZCBvZiB0aGUgZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSAgICBhcnJheSAgICBzZXR0aW5ncyAgICBBcnJheSBvZiBvYmplY3RzIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtOlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt7XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwiZGF0ZVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmb250U2V0dGluZ1wiOiB7XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9sZDogdHJ1ZSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJibGFja1wiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQ6IHtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbWlseTogXCJBa3JvbmltXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiBcIkFrcm9uaW1cIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVmVyZGFuYVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJnb29nbGVcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXCJodHRwOi8vY3VzdG9tLWZvbnQtdXJsXCJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodENvbG9yOiBcInRyYW5zcGFyZW50XCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRhbGljOiBmYWxzZSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcIjIwXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJsaW5lOiBmYWxzZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dXG4gICAqXG4gICAqICAgICAgICAgICBvYmplY3QgICBjb250ZW50RG9jICAgIERvY3VtZW50IG9iamVjdCBpbnRvIHdoaWNoIHRvIGluamVjdCBzdHlsZXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGxvYWQgZm9udHMgKG9wdGlvbmFsKS5cbiAgICovXG4gIGZ1bmN0aW9uIGxvYWRGb250cyhzZXR0aW5ncywgY29udGVudERvYykge1xuICAgIHNldHRpbmdzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgaWYgKGl0ZW0uY2xhc3MgJiYgaXRlbS5mb250U2V0dGluZykge1xuICAgICAgICBhZGRDU1NSdWxlcyhbIGdldEZvbnRDc3NTdHlsZShpdGVtLmNsYXNzLCBpdGVtLmZvbnRTZXR0aW5nKSBdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW0uZm9udFNldHRpbmcuZm9udC50eXBlKSB7XG4gICAgICAgIGlmIChpdGVtLmZvbnRTZXR0aW5nLmZvbnQudHlwZSA9PT0gXCJjdXN0b21cIiAmJiBpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5ICYmXG4gICAgICAgICAgaXRlbS5mb250U2V0dGluZy5mb250LnVybCkge1xuICAgICAgICAgIGxvYWRDdXN0b21Gb250KGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHksIGl0ZW0uZm9udFNldHRpbmcuZm9udC51cmwsXG4gICAgICAgICAgICBjb250ZW50RG9jKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtLmZvbnRTZXR0aW5nLmZvbnQudHlwZSA9PT0gXCJnb29nbGVcIiAmJiBpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5KSB7XG4gICAgICAgICAgbG9hZEdvb2dsZUZvbnQoaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSwgY29udGVudERvYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRDdXN0b21Gb250KGZhbWlseSwgdXJsLCBjb250ZW50RG9jKSB7XG4gICAgdmFyIHNoZWV0ID0gbnVsbDtcbiAgICB2YXIgcnVsZSA9IFwiZm9udC1mYW1pbHk6IFwiICsgZmFtaWx5ICsgXCI7IFwiICsgXCJzcmM6IHVybCgnXCIgKyB1cmwgKyBcIicpO1wiO1xuXG4gICAgY29udGVudERvYyA9IGNvbnRlbnREb2MgfHwgZG9jdW1lbnQ7XG5cbiAgICBzaGVldCA9IGNvbnRlbnREb2Muc3R5bGVTaGVldHNbMF07XG5cbiAgICBpZiAoc2hlZXQgIT09IG51bGwpIHtcbiAgICAgIHNoZWV0LmFkZFJ1bGUoXCJAZm9udC1mYWNlXCIsIHJ1bGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRHb29nbGVGb250KGZhbWlseSwgY29udGVudERvYykge1xuICAgIHZhciBzdHlsZXNoZWV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIiksXG4gICAgICBmYW1pbHlWYWw7XG5cbiAgICBjb250ZW50RG9jID0gY29udGVudERvYyB8fCBkb2N1bWVudDtcblxuICAgIHN0eWxlc2hlZXQuc2V0QXR0cmlidXRlKFwicmVsXCIsIFwic3R5bGVzaGVldFwiKTtcbiAgICBzdHlsZXNoZWV0LnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJ0ZXh0L2Nzc1wiKTtcblxuICAgIC8vIHNwbGl0IHRvIGFjY291bnQgZm9yIGZhbWlseSB2YWx1ZSBjb250YWluaW5nIGEgZmFsbGJhY2sgKGVnLiBBbGFkaW4sc2Fucy1zZXJpZilcbiAgICBmYW1pbHlWYWwgPSBmYW1pbHkuc3BsaXQoXCIsXCIpWzBdO1xuXG4gICAgLy8gc3RyaXAgcG9zc2libGUgc2luZ2xlIHF1b3Rlc1xuICAgIGZhbWlseVZhbCA9IGZhbWlseVZhbC5yZXBsYWNlKC8nL2csIFwiXCIpO1xuXG4gICAgc3R5bGVzaGVldC5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVwiICsgZmFtaWx5VmFsKTtcblxuICAgIGlmIChzdHlsZXNoZWV0ICE9PSBudWxsKSB7XG4gICAgICBjb250ZW50RG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChzdHlsZXNoZWV0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVsb2FkSW1hZ2VzKHVybHMpIHtcbiAgICB2YXIgbGVuZ3RoID0gdXJscy5sZW5ndGgsXG4gICAgICBpbWFnZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGltYWdlc1tpXSA9IG5ldyBJbWFnZSgpO1xuICAgICAgaW1hZ2VzW2ldLnNyYyA9IHVybHNbaV07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UXVlcnlQYXJhbWV0ZXIocGFyYW0pIHtcbiAgICB2YXIgcXVlcnkgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKSxcbiAgICAgIHZhcnMgPSBxdWVyeS5zcGxpdChcIiZcIiksXG4gICAgICBwYWlyO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyID0gdmFyc1tpXS5zcGxpdChcIj1cIik7XG5cbiAgICAgIGlmIChwYWlyWzBdID09IHBhcmFtKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRSaXNlQ2FjaGVFcnJvck1lc3NhZ2Uoc3RhdHVzQ29kZSkge1xuICAgIHZhciBlcnJvck1lc3NhZ2UgPSBcIlwiO1xuICAgIHN3aXRjaCAoc3RhdHVzQ29kZSkge1xuICAgICAgY2FzZSA0MDQ6XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiVGhlIGZpbGUgZG9lcyBub3QgZXhpc3Qgb3IgY2Fubm90IGJlIGFjY2Vzc2VkLlwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNTA3OlxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRoZXJlIGlzIG5vdCBlbm91Z2ggZGlzayBzcGFjZSB0byBzYXZlIHRoZSBmaWxlIG9uIFJpc2UgQ2FjaGUuXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUaGVyZSB3YXMgYSBwcm9ibGVtIHJldHJpZXZpbmcgdGhlIGZpbGUgZnJvbSBSaXNlIENhY2hlLlwiO1xuICAgIH1cblxuICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldFF1ZXJ5UGFyYW1ldGVyOiBnZXRRdWVyeVBhcmFtZXRlcixcbiAgICBnZXRGb250Q3NzU3R5bGU6ICBnZXRGb250Q3NzU3R5bGUsXG4gICAgYWRkQ1NTUnVsZXM6ICAgICAgYWRkQ1NTUnVsZXMsXG4gICAgbG9hZEZvbnRzOiAgICAgICAgbG9hZEZvbnRzLFxuICAgIGxvYWRDdXN0b21Gb250OiAgIGxvYWRDdXN0b21Gb250LFxuICAgIGxvYWRHb29nbGVGb250OiAgIGxvYWRHb29nbGVGb250LFxuICAgIHByZWxvYWRJbWFnZXM6ICAgIHByZWxvYWRJbWFnZXMsXG4gICAgZ2V0UmlzZUNhY2hlRXJyb3JNZXNzYWdlOiBnZXRSaXNlQ2FjaGVFcnJvck1lc3NhZ2VcbiAgfTtcbn0pKCk7XG5cbi8qIGdsb2JhbCBnYWRnZXRzICovXG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzID0gKGZ1bmN0aW9uKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICAgdmFyIGRpc3BsYXlJZCA9IFwiXCIsXG4gICAgY29tcGFueUlkID0gXCJcIjtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuXG4gIC8qIFJldHJpZXZlIHBhcmFtZXRlcnMgdG8gcGFzcyB0byB0aGUgZXZlbnQgbG9nZ2VyLiAqL1xuICBmdW5jdGlvbiBnZXRFdmVudFBhcmFtcyhwYXJhbXMsIGNiKSB7XG4gICAgdmFyIGpzb24gPSBudWxsO1xuXG4gICAgLy8gZXZlbnQgaXMgcmVxdWlyZWQuXG4gICAgaWYgKHBhcmFtcy5ldmVudCkge1xuICAgICAganNvbiA9IHBhcmFtcztcblxuICAgICAgaWYgKGpzb24uZmlsZV91cmwpIHtcbiAgICAgICAganNvbi5maWxlX2Zvcm1hdCA9IGdldEZpbGVGb3JtYXQoanNvbi5maWxlX3VybCk7XG4gICAgICB9XG5cbiAgICAgIGpzb24uY29tcGFueV9pZCA9IGNvbXBhbnlJZDtcbiAgICAgIGpzb24uZGlzcGxheV9pZCA9IGRpc3BsYXlJZDtcblxuICAgICAgY2IoanNvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY2IoanNvbik7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IHN1ZmZpeCBmb3IgQlEgdGFibGUgbmFtZS5cbiAgZnVuY3Rpb24gZ2V0U3VmZml4KCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoKSxcbiAgICAgIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgICBkYXkgPSBkYXRlLmdldFVUQ0RhdGUoKTtcblxuICAgIGlmIChtb250aCA8IDEwKSB7XG4gICAgICBtb250aCA9IFwiMFwiICsgbW9udGg7XG4gICAgfVxuXG4gICAgaWYgKGRheSA8IDEwKSB7XG4gICAgICBkYXkgPSBcIjBcIiArIGRheTtcbiAgICB9XG5cbiAgICByZXR1cm4geWVhciArIG1vbnRoICsgZGF5O1xuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBnZXRGaWxlRm9ybWF0KHVybCkge1xuICAgIHZhciBoYXNQYXJhbXMgPSAvWz8jJl0vLFxuICAgICAgc3RyO1xuXG4gICAgaWYgKCF1cmwgfHwgdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3RyID0gdXJsLnN1YnN0cih1cmwubGFzdEluZGV4T2YoXCIuXCIpICsgMSk7XG5cbiAgICAvLyBkb24ndCBpbmNsdWRlIGFueSBwYXJhbXMgYWZ0ZXIgdGhlIGZpbGVuYW1lXG4gICAgaWYgKGhhc1BhcmFtcy50ZXN0KHN0cikpIHtcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCAsKHN0ci5pbmRleE9mKFwiP1wiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCI/XCIpIDogc3RyLmxlbmd0aCk7XG5cbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgKHN0ci5pbmRleE9mKFwiI1wiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCIjXCIpIDogc3RyLmxlbmd0aCk7XG5cbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgKHN0ci5pbmRleE9mKFwiJlwiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCImXCIpIDogc3RyLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5zZXJ0RGF0YShwYXJhbXMpIHtcbiAgICB2YXIgQkFTRV9JTlNFUlRfU0NIRU1BID0ge1xuICAgICAgXCJraW5kXCI6IFwiYmlncXVlcnkjdGFibGVEYXRhSW5zZXJ0QWxsUmVxdWVzdFwiLFxuICAgICAgXCJza2lwSW52YWxpZFJvd3NcIjogZmFsc2UsXG4gICAgICBcImlnbm9yZVVua25vd25WYWx1ZXNcIjogZmFsc2UsXG4gICAgICBcInRlbXBsYXRlU3VmZml4XCI6IGdldFN1ZmZpeCgpLFxuICAgICAgXCJyb3dzXCI6IFt7XG4gICAgICAgIFwiaW5zZXJ0SWRcIjogXCJcIlxuICAgICAgfV1cbiAgICB9LFxuICAgIGRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KEJBU0VfSU5TRVJUX1NDSEVNQSkpO1xuXG4gICAgZGF0YS5yb3dzWzBdLmluc2VydElkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIpLnRvVXBwZXJDYXNlKCk7XG4gICAgZGF0YS5yb3dzWzBdLmpzb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICAgIGRhdGEucm93c1swXS5qc29uLnRzID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudCh0YWJsZSwgcGFyYW1zKSB7XG4gICAgZ2V0RXZlbnRQYXJhbXMocGFyYW1zLCBmdW5jdGlvbihqc29uKSB7XG4gICAgICBpZiAoanNvbiAhPT0gbnVsbCkge1xuICAgICAgICBSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXIubG9nKHRhYmxlLCBqc29uKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qIFNldCB0aGUgQ29tcGFueSBhbmQgRGlzcGxheSBJRHMuICovXG4gIGZ1bmN0aW9uIHNldElkcyhjb21wYW55LCBkaXNwbGF5KSB7XG4gICAgY29tcGFueUlkID0gY29tcGFueTtcbiAgICBkaXNwbGF5SWQgPSBkaXNwbGF5O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImdldEluc2VydERhdGFcIjogZ2V0SW5zZXJ0RGF0YSxcbiAgICBcImdldEZpbGVGb3JtYXRcIjogZ2V0RmlsZUZvcm1hdCxcbiAgICBcImxvZ0V2ZW50XCI6IGxvZ0V2ZW50LFxuICAgIFwic2V0SWRzXCI6IHNldElkc1xuICB9O1xufSkoKTtcblxuUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyID0gKGZ1bmN0aW9uKHV0aWxzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBSRUZSRVNIX1VSTCA9IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuP2NsaWVudF9pZD1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9DTElFTlRfSUQgK1xuICAgICAgXCImY2xpZW50X3NlY3JldD1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9DTElFTlRfU0VDUkVUICtcbiAgICAgIFwiJnJlZnJlc2hfdG9rZW49XCIgKyBXSURHRVRfQ09NTU9OX0NPTkZJRy5MT0dHRVJfUkVGUkVTSF9UT0tFTiArXG4gICAgICBcIiZncmFudF90eXBlPXJlZnJlc2hfdG9rZW5cIjtcblxuICB2YXIgc2VydmljZVVybCA9IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYmlncXVlcnkvdjIvcHJvamVjdHMvY2xpZW50LXNpZGUtZXZlbnRzL2RhdGFzZXRzL1dpZGdldF9FdmVudHMvdGFibGVzL1RBQkxFX0lEL2luc2VydEFsbFwiLFxuICAgIHRocm90dGxlID0gZmFsc2UsXG4gICAgdGhyb3R0bGVEZWxheSA9IDEwMDAsXG4gICAgbGFzdEV2ZW50ID0gXCJcIixcbiAgICByZWZyZXNoRGF0ZSA9IDAsXG4gICAgdG9rZW4gPSBcIlwiO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIHJlZnJlc2hUb2tlbihjYikge1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIGlmIChuZXcgRGF0ZSgpIC0gcmVmcmVzaERhdGUgPCAzNTgwMDAwKSB7XG4gICAgICByZXR1cm4gY2Ioe30pO1xuICAgIH1cblxuICAgIHhoci5vcGVuKFwiUE9TVFwiLCBSRUZSRVNIX1VSTCwgdHJ1ZSk7XG4gICAgeGhyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlc3AgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7XG5cbiAgICAgIGNiKHsgdG9rZW46IHJlc3AuYWNjZXNzX3Rva2VuLCByZWZyZXNoZWRBdDogbmV3IERhdGUoKSB9KTtcbiAgICB9O1xuXG4gICAgeGhyLnNlbmQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVGhyb3R0bGVkKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRocm90dGxlICYmIChsYXN0RXZlbnQgPT09IGV2ZW50KTtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gbG9nKHRhYmxlTmFtZSwgcGFyYW1zKSB7XG4gICAgaWYgKCF0YWJsZU5hbWUgfHwgIXBhcmFtcyB8fCAocGFyYW1zLmhhc093blByb3BlcnR5KFwiZXZlbnRcIikgJiYgIXBhcmFtcy5ldmVudCkgfHxcbiAgICAgIChwYXJhbXMuaGFzT3duUHJvcGVydHkoXCJldmVudFwiKSAmJiBpc1Rocm90dGxlZChwYXJhbXMuZXZlbnQpKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRocm90dGxlID0gdHJ1ZTtcbiAgICBsYXN0RXZlbnQgPSBwYXJhbXMuZXZlbnQ7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm90dGxlID0gZmFsc2U7XG4gICAgfSwgdGhyb3R0bGVEZWxheSk7XG5cbiAgICBmdW5jdGlvbiBpbnNlcnRXaXRoVG9rZW4ocmVmcmVzaERhdGEpIHtcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgaW5zZXJ0RGF0YSwgdXJsO1xuXG4gICAgICB1cmwgPSBzZXJ2aWNlVXJsLnJlcGxhY2UoXCJUQUJMRV9JRFwiLCB0YWJsZU5hbWUpO1xuICAgICAgcmVmcmVzaERhdGUgPSByZWZyZXNoRGF0YS5yZWZyZXNoZWRBdCB8fCByZWZyZXNoRGF0ZTtcbiAgICAgIHRva2VuID0gcmVmcmVzaERhdGEudG9rZW4gfHwgdG9rZW47XG4gICAgICBpbnNlcnREYXRhID0gdXRpbHMuZ2V0SW5zZXJ0RGF0YShwYXJhbXMpO1xuXG4gICAgICAvLyBJbnNlcnQgdGhlIGRhdGEuXG4gICAgICB4aHIub3BlbihcIlBPU1RcIiwgdXJsLCB0cnVlKTtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQXV0aG9yaXphdGlvblwiLCBcIkJlYXJlciBcIiArIHRva2VuKTtcblxuICAgICAgaWYgKHBhcmFtcy5jYiAmJiB0eXBlb2YgcGFyYW1zLmNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgeGhyLm9ubG9hZGVuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHBhcmFtcy5jYih4aHIucmVzcG9uc2UpO1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChKU09OLnN0cmluZ2lmeShpbnNlcnREYXRhKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlZnJlc2hUb2tlbihpbnNlcnRXaXRoVG9rZW4pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImxvZ1wiOiBsb2dcbiAgfTtcbn0pKFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzKTtcbi8qIGdsb2JhbCBnYWRnZXRzLCBfICovXG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uUlNTID0ge307XG5cblJpc2VWaXNpb24uUlNTID0gKGZ1bmN0aW9uIChkb2N1bWVudCwgZ2FkZ2V0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2FkZGl0aW9uYWxQYXJhbXMgPSBudWxsLFxuICAgIF9wcmVmcyA9IG5ldyBnYWRnZXRzLlByZWZzKCk7XG5cbiAgdmFyIF9tZXNzYWdlID0gbnVsbCxcbiAgICBfcmlzZXJzcyA9IG51bGwsXG4gICAgX2NvbnRlbnQgPSBudWxsO1xuXG4gIHZhciBfY3VycmVudEZlZWQgPSBudWxsO1xuXG4gIHZhciBfdmlld2VyUGF1c2VkID0gdHJ1ZSxcbiAgICBfZXJyb3JUaW1lciA9IG51bGwsXG4gICAgX2Vycm9yTG9nID0gbnVsbCxcbiAgICBfZXJyb3JGbGFnID0gZmFsc2U7XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gX3JlYWR5KCkge1xuICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc2V2ZW50X3JlYWR5XCIsIG51bGwsIF9wcmVmcy5nZXRTdHJpbmcoXCJpZFwiKSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZG9uZSgpIHtcbiAgICBnYWRnZXRzLnJwYy5jYWxsKFwiXCIsIFwicnNldmVudF9kb25lXCIsIG51bGwsIF9wcmVmcy5nZXRTdHJpbmcoXCJpZFwiKSk7XG5cbiAgICAvLyBBbnkgZXJyb3JzIG5lZWQgdG8gYmUgbG9nZ2VkIGJlZm9yZSB0aGUgZG9uZSBldmVudC5cbiAgICBpZiAoX2Vycm9yTG9nICE9PSBudWxsKSB7XG4gICAgICBsb2dFdmVudChfZXJyb3JMb2csIHRydWUpO1xuICAgIH1cblxuICAgIC8vIGxvZyBcImRvbmVcIiBldmVudFxuICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcImRvbmVcIiwgXCJmZWVkX3VybFwiOiBfYWRkaXRpb25hbFBhcmFtcy51cmwgfSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gX25vRmVlZEl0ZW1zKCkge1xuICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICBcImV2ZW50XCI6IFwiZXJyb3JcIixcbiAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcIm5vIGZlZWQgaXRlbXNcIixcbiAgICAgIFwiZmVlZF91cmxcIjogX2FkZGl0aW9uYWxQYXJhbXMudXJsXG4gICAgfTtcblxuICAgIGxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgc2hvd0Vycm9yKFwiVGhlcmUgYXJlIG5vIGl0ZW1zIHRvIHNob3cgZnJvbSB0aGlzIFJTUyBmZWVkLlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGVhckVycm9yVGltZXIoKSB7XG4gICAgY2xlYXJUaW1lb3V0KF9lcnJvclRpbWVyKTtcbiAgICBfZXJyb3JUaW1lciA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhcnRFcnJvclRpbWVyKCkge1xuICAgIF9jbGVhckVycm9yVGltZXIoKTtcblxuICAgIF9lcnJvclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBub3RpZnkgVmlld2VyIHdpZGdldCBpcyBkb25lXG4gICAgICBfZG9uZSgpO1xuICAgIH0sIDUwMDApO1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgX21lc3NhZ2UgPSBuZXcgUmlzZVZpc2lvbi5Db21tb24uTWVzc2FnZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRhaW5lclwiKSxcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVzc2FnZUNvbnRhaW5lclwiKSk7XG5cbiAgICAvLyBzaG93IHdhaXQgbWVzc2FnZVxuICAgIF9tZXNzYWdlLnNob3coXCJQbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGZlZWQgaXMgbG9hZGVkLlwiKTtcblxuICAgIC8vIExvYWQgZm9udHMuXG4gICAgdmFyIGZvbnRTZXR0aW5ncyA9IFtcbiAgICAgIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcInN0b3J5X2ZvbnQtc3R5bGVcIixcbiAgICAgICAgXCJmb250U2V0dGluZ1wiOiBfYWRkaXRpb25hbFBhcmFtcy5zdG9yeS5mb250U3R5bGVcbiAgICAgIH1cbiAgICBdO1xuXG4gICAgaWYoIV8uaXNFbXB0eShfYWRkaXRpb25hbFBhcmFtcy5oZWFkbGluZS5mb250U3R5bGUpKXtcbiAgICAgIGZvbnRTZXR0aW5ncy5wdXNoKHtcbiAgICAgICAgXCJjbGFzc1wiOiBcImhlYWRsaW5lX2ZvbnQtc3R5bGVcIixcbiAgICAgICAgXCJmb250U2V0dGluZ1wiOiBfYWRkaXRpb25hbFBhcmFtcy5oZWFkbGluZS5mb250U3R5bGVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmKCFfLmlzRW1wdHkoX2FkZGl0aW9uYWxQYXJhbXMudGltZXN0YW1wLmZvbnRTdHlsZSkpe1xuICAgICAgZm9udFNldHRpbmdzLnB1c2goe1xuICAgICAgICBcImNsYXNzXCI6IFwidGltZXN0YW1wX2ZvbnQtc3R5bGVcIixcbiAgICAgICAgXCJmb250U2V0dGluZ1wiOiBfYWRkaXRpb25hbFBhcmFtcy50aW1lc3RhbXAuZm9udFN0eWxlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBSaXNlVmlzaW9uLkNvbW1vbi5VdGlsaXRpZXMubG9hZEZvbnRzKGZvbnRTZXR0aW5ncyk7XG5cbiAgICAvLyBjcmVhdGUgYW5kIGluaXRpYWxpemUgdGhlIHJzcyBtb2R1bGUgaW5zdGFuY2VcbiAgICBfcmlzZXJzcyA9IG5ldyBSaXNlVmlzaW9uLlJTUy5SaXNlUlNTKF9hZGRpdGlvbmFsUGFyYW1zKTtcbiAgICBfcmlzZXJzcy5pbml0KCk7XG5cbiAgICBfcmVhZHkoKTtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0VGFibGVOYW1lKCkge1xuICAgIHJldHVybiBcInJzc19ldmVudHNcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ0V2ZW50KHBhcmFtcywgaXNFcnJvcikge1xuICAgIGlmIChpc0Vycm9yKSB7XG4gICAgICBfZXJyb3JMb2cgPSBwYXJhbXM7XG4gICAgfVxuXG4gICAgUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMubG9nRXZlbnQoZ2V0VGFibGVOYW1lKCksIHBhcmFtcyk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNvbnRlbnREb25lKCkge1xuICAgIF9kb25lKCk7XG4gIH1cblxuICBmdW5jdGlvbiBvblJpc2VSU1NJbml0KGZlZWQpIHtcbiAgICBjb25zb2xlLmxvZyhcIm9uUmlzZVJTU0luaXRcIik7XG4gICAgY29uc29sZS5kaXIoZmVlZCk7XG5cbiAgICBfY29udGVudCA9IG5ldyBSaXNlVmlzaW9uLlJTUy5Db250ZW50KF9wcmVmcywgX2FkZGl0aW9uYWxQYXJhbXMpO1xuXG4gICAgaWYgKGZlZWQuaXRlbXMgJiYgZmVlZC5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyByZW1vdmUgYSBtZXNzYWdlIHByZXZpb3VzbHkgc2hvd25cbiAgICAgIF9tZXNzYWdlLmhpZGUoKTtcblxuICAgICAgX2N1cnJlbnRGZWVkID0gXy5jbG9uZShmZWVkKTtcblxuICAgICAgX2NvbnRlbnQuaW5pdChfY3VycmVudEZlZWQpO1xuXG4gICAgICBpZiAoIV92aWV3ZXJQYXVzZWQpIHtcbiAgICAgICAgX2NvbnRlbnQucGxheSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIF9ub0ZlZWRJdGVtcygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUmlzZVJTU1JlZnJlc2goZmVlZCkge1xuICAgIGNvbnNvbGUubG9nKFwib25SaXNlUlNTUmVmcmVzaFwiKTtcbiAgICBjb25zb2xlLmRpcihmZWVkKTtcblxuICAgIHZhciB1cGRhdGVkID0gZmFsc2U7XG5cbiAgICBpZiAoIWZlZWQuaXRlbXMgfHwgZmVlZC5pdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIF9ub0ZlZWRJdGVtcygpO1xuICAgIH1cbiAgICBlbHNlIGlmICghX2N1cnJlbnRGZWVkIHx8IGZlZWQuaXRlbXMubGVuZ3RoICE9PSBfY3VycmVudEZlZWQuaXRlbXMubGVuZ3RoKSB7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBydW4gdGhyb3VnaCBlYWNoIGl0ZW0gYW5kIGNvbXBhcmUsIGlmIGFueSBhcmUgZGlmZmVyZW50LCBmZWVkIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX2N1cnJlbnRGZWVkLml0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICghXy5pc0VxdWFsKGZlZWQuaXRlbXNbaV0sIF9jdXJyZW50RmVlZC5pdGVtc1tpXSkpIHtcbiAgICAgICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICBfY3VycmVudEZlZWQgPSBfLmNsb25lKGZlZWQpO1xuXG4gICAgICBpZiAoX2Vycm9yRmxhZykge1xuICAgICAgICBpZiAoIV9jb250ZW50KSB7XG4gICAgICAgICAgLy8gY3JlYXRlIGNvbnRlbnQgbW9kdWxlIGluc3RhbmNlXG4gICAgICAgICAgX2NvbnRlbnQgPSBuZXcgUmlzZVZpc2lvbi5SU1MuQ29udGVudChfcHJlZnMsIF9hZGRpdGlvbmFsUGFyYW1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9tZXNzYWdlLmhpZGUoKTtcbiAgICAgICAgX2NvbnRlbnQuaW5pdChfY3VycmVudEZlZWQpO1xuXG4gICAgICAgIC8vIHJlZnJlc2hlZCBmZWVkIGZpeGVkIHByZXZpb3VzIGVycm9yLCBlbnN1cmUgZmxhZyBpcyByZW1vdmVkIHNvIG5leHQgcGxheWJhY2sgc2hvd3MgY29udGVudFxuICAgICAgICBfZXJyb3JGbGFnID0gZmFsc2U7XG4gICAgICAgIF9lcnJvckxvZyA9IG51bGw7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgX2NvbnRlbnQudXBkYXRlKGZlZWQpO1xuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgX3ZpZXdlclBhdXNlZCA9IHRydWU7XG5cbiAgICBpZiAoX2Vycm9yRmxhZykge1xuICAgICAgX2NsZWFyRXJyb3JUaW1lcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfY29udGVudCkge1xuICAgICAgX2NvbnRlbnQucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIF92aWV3ZXJQYXVzZWQgPSBmYWxzZTtcblxuICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcInBsYXlcIiwgXCJmZWVkX3VybFwiOiBfYWRkaXRpb25hbFBhcmFtcy51cmwgfSwgZmFsc2UpO1xuXG4gICAgaWYgKF9lcnJvckZsYWcpIHtcbiAgICAgIF9zdGFydEVycm9yVGltZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoX2NvbnRlbnQpIHtcbiAgICAgIF9jb250ZW50LnBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBZGRpdGlvbmFsUGFyYW1zKGFkZGl0aW9uYWxQYXJhbXMpIHtcbiAgICBfYWRkaXRpb25hbFBhcmFtcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYWRkaXRpb25hbFBhcmFtcykpO1xuICAgIF9wcmVmcyA9IG5ldyBnYWRnZXRzLlByZWZzKCk7XG5cbiAgICBfYWRkaXRpb25hbFBhcmFtcy53aWR0aCA9IF9wcmVmcy5nZXRJbnQoXCJyc1dcIik7XG4gICAgX2FkZGl0aW9uYWxQYXJhbXMuaGVpZ2h0ID0gX3ByZWZzLmdldEludChcInJzSFwiKTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLnN0eWxlLndpZHRoID0gX2FkZGl0aW9uYWxQYXJhbXMud2lkdGggKyBcInB4XCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIikuc3R5bGUuaGVpZ2h0ID0gX2FkZGl0aW9uYWxQYXJhbXMuaGVpZ2h0ICsgXCJweFwiO1xuXG4gICAgX2luaXQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3dFcnJvcihtZXNzYWdlKSB7XG4gICAgX2Vycm9yRmxhZyA9IHRydWU7XG5cbiAgICBfY29udGVudC5yZXNldCgpO1xuICAgIF9jdXJyZW50RmVlZCA9IG51bGw7XG4gICAgX21lc3NhZ2Uuc2hvdyhtZXNzYWdlKTtcblxuICAgIGlmICghX3ZpZXdlclBhdXNlZCkge1xuICAgICAgX3N0YXJ0RXJyb3JUaW1lcigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgcGF1c2UoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJnZXRUYWJsZU5hbWVcIjogZ2V0VGFibGVOYW1lLFxuICAgIFwibG9nRXZlbnRcIjogbG9nRXZlbnQsXG4gICAgXCJvbkNvbnRlbnREb25lXCI6IG9uQ29udGVudERvbmUsXG4gICAgXCJvblJpc2VSU1NJbml0XCI6IG9uUmlzZVJTU0luaXQsXG4gICAgXCJvblJpc2VSU1NSZWZyZXNoXCI6IG9uUmlzZVJTU1JlZnJlc2gsXG4gICAgXCJwYXVzZVwiOiBwYXVzZSxcbiAgICBcInBsYXlcIjogcGxheSxcbiAgICBcInNldEFkZGl0aW9uYWxQYXJhbXNcIjogc2V0QWRkaXRpb25hbFBhcmFtcyxcbiAgICBcInNob3dFcnJvclwiOiBzaG93RXJyb3IsXG4gICAgXCJzdG9wXCI6IHN0b3BcbiAgfTtcblxufSkoZG9jdW1lbnQsIGdhZGdldHMpO1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLlJTUyA9IFJpc2VWaXNpb24uUlNTIHx8IHt9O1xuXG5SaXNlVmlzaW9uLlJTUy5VdGlscyA9IChmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8qXG4gICAqICBQdWJsaWMgIE1ldGhvZHNcbiAgICovXG5cbiAgZnVuY3Rpb24gc3RyaXBTY3JpcHRzKGh0bWwpIHtcbiAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxcbiAgICAgIHNjcmlwdHMsIGk7XG5cbiAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcbiAgICBzY3JpcHRzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuICAgIGkgPSBzY3JpcHRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHNjcmlwdHNbaV0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHRzW2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGl2LmlubmVySFRNTDtcbiAgfVxuXG4gIC8qIFRydW5jYXRlIHRleHQgd2hpbGUgcHJlc2VydmluZyB3b3JkIGJvdW5kYXJpZXMuICovXG4gIGZ1bmN0aW9uIHRydW5jYXRlKHRleHQpIHtcbiAgICB2YXIgbWF4TGVuZ3RoID0gMTIwO1xuXG4gICAgaWYgKHRleHQubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgICB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgbWF4TGVuZ3RoKTtcblxuICAgICAgLy8gRW5zdXJlIHRoYXQgd2UgZG9uJ3QgdHJ1bmNhdGUgbWlkLXdvcmQuXG4gICAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC9cXHcrJC8sIFwiXCIpO1xuICAgICAgdGV4dCArPSBcIiAuLi5cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJzdHJpcFNjcmlwdHNcIjogc3RyaXBTY3JpcHRzLFxuICAgIFwidHJ1bmNhdGVcIjogdHJ1bmNhdGVcbiAgfTtcblxufSkoKTtcblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5SU1MgPSBSaXNlVmlzaW9uLlJTUyB8fCB7fTtcblxuUmlzZVZpc2lvbi5SU1MuUmlzZVJTUyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaW5pdGlhbExvYWQgPSB0cnVlO1xuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgcnNzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInJpc2UtcnNzXCIpO1xuXG4gICAgcnNzLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXJzcy1yZXNwb25zZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoZS5kZXRhaWwgJiYgZS5kZXRhaWwuZmVlZCkge1xuICAgICAgICBpZiAoX2luaXRpYWxMb2FkKSB7XG4gICAgICAgICAgX2luaXRpYWxMb2FkID0gZmFsc2U7XG5cbiAgICAgICAgICBSaXNlVmlzaW9uLlJTUy5vblJpc2VSU1NJbml0KGUuZGV0YWlsLmZlZWQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUmlzZVZpc2lvbi5SU1Mub25SaXNlUlNTUmVmcmVzaChlLmRldGFpbC5mZWVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcnNzLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXJzcy1lcnJvclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyIGVycm9yRGV0YWlscyA9IFwiXCI7XG5cbiAgICAgIGlmIChlLmRldGFpbCAmJiB0eXBlb2YgZS5kZXRhaWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZXJyb3JEZXRhaWxzID0gZS5kZXRhaWw7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChlLmRldGFpbCAmJiBBcnJheS5pc0FycmF5KGUuZGV0YWlsKSAmJiBlLmRldGFpbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIHJpc2UtcnNzLWVycm9yIHBhc3NlcyBlcnJvciBmcm9tIGdhZGdldHMuaW8ubWFrZVJlcXVlc3Qgd2hpY2ggaXMgYWx3YXlzIGFuIEFycmF5IHdpdGggb25lIGl0ZW1cbiAgICAgICAgZXJyb3JEZXRhaWxzID0gZS5kZXRhaWxbMF07XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJyaXNlIHJzcyBlcnJvclwiLFxuICAgICAgICBcImVycm9yX2RldGFpbHNcIjogZXJyb3JEZXRhaWxzLFxuICAgICAgICBcImZlZWRfdXJsXCI6IGRhdGEudXJsXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlJTUy5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5SU1Muc2hvd0Vycm9yKFwiU29ycnksIHRoZXJlIHdhcyBhIHByb2JsZW0gd2l0aCB0aGUgUlNTIGZlZWQuXCIsIHRydWUpO1xuICAgIH0pO1xuXG4gICAgcnNzLnNldEF0dHJpYnV0ZShcInVybFwiLCBkYXRhLnVybCk7XG5cbiAgICBpZiAoZGF0YS5pdGVtc0luUXVldWUpIHtcbiAgICAgIHJzcy5zZXRBdHRyaWJ1dGUoXCJlbnRyaWVzXCIsIGRhdGEuaXRlbXNJblF1ZXVlKTtcbiAgICB9XG5cbiAgICByc3MuZ28oKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJpbml0XCI6IGluaXRcbiAgfTtcbn07XG5cbi8qIGdsb2JhbCBfICovXG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uUlNTID0gUmlzZVZpc2lvbi5SU1MgfHwge307XG5cblJpc2VWaXNpb24uUlNTLkNvbnRlbnQgPSBmdW5jdGlvbiAocHJlZnMsIHBhcmFtcykge1xuXG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaXRlbXMgPSBbXSxcbiAgICBfdXRpbHMgPSBSaXNlVmlzaW9uLlJTUy5VdGlscztcblxuICB2YXIgXyRlbDtcblxuICB2YXIgX2N1cnJlbnRJdGVtSW5kZXggPSAwO1xuXG4gIHZhciBfdHJhbnNpdGlvbkludGVydmFsSWQgPSBudWxsO1xuXG4gIHZhciBfdHJhbnNpdGlvbiA9IHtcbiAgICBcInR5cGVcIjogXCJub25lXCIsXG4gICAgZHVyYXRpb246IDEwMDAwXG4gIH07XG5cbiAgdmFyIF93YWl0aW5nRm9yVXBkYXRlID0gZmFsc2U7XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gX2NhY2hlKCkge1xuICAgIF8kZWwgPSB7XG4gICAgICBwYWdlOiAgICAgICAgICAgJChcIi5wYWdlXCIpXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRJdGVtSGVpZ2h0KCkge1xuICAgIC8vIGFjY291bnQgZm9yIG5vdCBlbm91Z2ggaXRlbXMgdG8gYWN0dWFsbHkgc2hvdyBjb21wYXJlZCB0byBzZXR0aW5nIHZhbHVlXG4gICAgdmFyIGl0ZW1zVG9TaG93ID0gKF9pdGVtcy5sZW5ndGggPD0gcGFyYW1zLml0ZW1zVG9TaG93KSA/IF9pdGVtcy5sZW5ndGggOiBwYXJhbXMuaXRlbXNUb1Nob3c7XG5cbiAgICByZXR1cm4gcHJlZnMuZ2V0SW50KFwicnNIXCIpIC8gaXRlbXNUb1Nob3c7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0VHJhbnNpdGlvbkNvbmZpZyhpbmRleCkge1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIGlmICgoaW5kZXggKyBwYXJhbXMuaXRlbXNUb1Nob3cpID49IChfaXRlbXMubGVuZ3RoIC0gMSkpIHtcbiAgICAgIC8vIGFjY291bnQgZm9yIG5vdCBlbm91Z2ggaXRlbXMgdG8gYWN0dWFsbHkgc2hvdyBmcm9tIHRoZSBmZWVkXG4gICAgICBjb25maWcuaXRlbXNUb1Nob3cgPSBfaXRlbXMubGVuZ3RoIC0gKGluZGV4ICsgMSk7XG4gICAgICBjb25maWcuY3VycmVudEl0ZW1JbmRleCA9IChfaXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uZmlnLml0ZW1zVG9TaG93ID0gcGFyYW1zLml0ZW1zVG9TaG93O1xuICAgICAgLy8gdmFsdWUgaXMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGl0ZW0gc2hvd2luZ1xuICAgICAgY29uZmlnLmN1cnJlbnRJdGVtSW5kZXggPSBpbmRleCArIHBhcmFtcy5pdGVtc1RvU2hvdztcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldFN0YXJ0Q29uZmlnKCkge1xuICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgIGlmIChfaXRlbXMubGVuZ3RoIDw9IHBhcmFtcy5pdGVtc1RvU2hvdykge1xuICAgICAgLy8gYWNjb3VudCBmb3Igbm90IGVub3VnaCBpdGVtcyB0byBhY3R1YWxseSBzaG93IGZyb20gdGhlIGZlZWRcbiAgICAgIGNvbmZpZy5pdGVtc1RvU2hvdyA9IF9pdGVtcy5sZW5ndGg7XG4gICAgICBjb25maWcuY3VycmVudEl0ZW1JbmRleCA9IChfaXRlbXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uZmlnLml0ZW1zVG9TaG93ID0gcGFyYW1zLml0ZW1zVG9TaG93O1xuICAgICAgLy8gdmFsdWUgaXMgdGhlIGluZGV4IG9mIHRoZSBsYXN0IGl0ZW0gc2hvd2luZ1xuICAgICAgY29uZmlnLmN1cnJlbnRJdGVtSW5kZXggPSAocGFyYW1zLml0ZW1zVG9TaG93IC0gMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRTdG9yeShpdGVtKSB7XG4gICAgdmFyIHN0b3J5ID0gbnVsbDtcblxuICAgIGlmIChfLmhhcyhpdGVtLCBcImNvbnRlbnQ6ZW5jb2RlZFwiKSkge1xuICAgICAgc3RvcnkgPSBpdGVtW1wiY29udGVudDplbmNvZGVkXCJdO1xuICAgIH0gZWxzZSBpZiAoXy5oYXMoaXRlbSwgXCJkZXNjcmlwdGlvblwiKSkge1xuICAgICAgc3RvcnkgPSBpdGVtLmRlc2NyaXB0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBzdG9yeTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRUZW1wbGF0ZShpdGVtKSB7XG4gICAgdmFyIHN0b3J5ID0gX2dldFN0b3J5KGl0ZW0pLFxuICAgICAgdGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Jzc0l0ZW1cIikuY29udGVudCxcbiAgICAgICRjb250ZW50ID0gJCh0ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSkpLFxuICAgICAgJHN0b3J5LCBjbG9uZTtcblxuICAgIC8vIEhlYWRsaW5lXG4gICAgaWYgKCFpdGVtLnRpdGxlIHx8ICgodHlwZW9mIHBhcmFtcy5kYXRhU2VsZWN0aW9uLnNob3dUaXRsZSAhPT0gXCJ1bmRlZmluZWRcIikgJiZcbiAgICAgICFwYXJhbXMuZGF0YVNlbGVjdGlvbi5zaG93VGl0bGUpKSB7XG4gICAgICAkY29udGVudC5maW5kKFwiLmhlYWRsaW5lXCIpLnJlbW92ZSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICRjb250ZW50LmZpbmQoXCIuaGVhZGxpbmVcIikuY3NzKFwidGV4dEFsaWduXCIsIHBhcmFtcy5oZWFkbGluZS5mb250U3R5bGUuYWxpZ24pO1xuICAgICAgJGNvbnRlbnQuZmluZChcIi5oZWFkbGluZSBhXCIpLnRleHQoaXRlbS50aXRsZSk7XG4gICAgfVxuXG4gICAgLy8gVGltZXN0YW1wXG4gICAgaWYgKCFpdGVtLnB1YmRhdGUgfHwgKCh0eXBlb2YgcGFyYW1zLmRhdGFTZWxlY3Rpb24uc2hvd1RpbWVzdGFtcCAhPT0gXCJ1bmRlZmluZWRcIikgJiZcbiAgICAgICFwYXJhbXMuZGF0YVNlbGVjdGlvbi5zaG93VGltZXN0YW1wKSkge1xuICAgICAgJGNvbnRlbnQuZmluZChcIi50aW1lc3RhbXBcIikucmVtb3ZlKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHB1YmRhdGUgPSBuZXcgRGF0ZShpdGVtLnB1YmRhdGUpO1xuICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIHllYXI6IFwibnVtZXJpY1wiLCBtb250aDogXCJsb25nXCIsIGRheTogXCJudW1lcmljXCJcbiAgICAgIH07XG4gICAgICB2YXIgdGltZXN0YW1wID0gcHViZGF0ZS50b0xvY2FsZURhdGVTdHJpbmcoXCJlbi11c1wiLCBvcHRpb25zKTtcbiAgICAgICRjb250ZW50LmZpbmQoXCIudGltZXN0YW1wXCIpLmNzcyhcInRleHRBbGlnblwiLCBwYXJhbXMudGltZXN0YW1wLmZvbnRTdHlsZS5hbGlnbik7XG4gICAgICAkY29udGVudC5maW5kKFwiLnRpbWVzdGFtcFwiKS50ZXh0KHRpbWVzdGFtcCk7XG4gICAgfVxuXG4gICAgLy8gU3RvcnlcbiAgICBpZiAoIXN0b3J5KSB7XG4gICAgICAkY29udGVudC5yZW1vdmUoXCIuc3RvcnlcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgJHN0b3J5ID0gJGNvbnRlbnQuZmluZChcIi5zdG9yeVwiKTtcbiAgICAgICRzdG9yeS5jc3MoXCJ0ZXh0QWxpZ25cIiwgcGFyYW1zLnN0b3J5LmZvbnRTdHlsZS5hbGlnbik7XG4gICAgICBzdG9yeSA9IF91dGlscy5zdHJpcFNjcmlwdHMoc3RvcnkpO1xuXG4gICAgICBpZiAocGFyYW1zLmRhdGFTZWxlY3Rpb24uc2hvd0Rlc2NyaXB0aW9uID09PSBcInNuaXBwZXRcIikge1xuICAgICAgICAkc3RvcnkuaHRtbChfdXRpbHMudHJ1bmNhdGUoJChcIjxkaXYvPlwiKS5odG1sKHN0b3J5KS50ZXh0KCkpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkc3RvcnkuaHRtbChzdG9yeSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IHRoZSBzdG9yeSBmb250IHN0eWxpbmcgdG8gY2hpbGQgZWxlbWVudHMgYXMgd2VsbC5cbiAgICAgICRzdG9yeS5maW5kKFwicFwiKS5hZGRDbGFzcyhcInN0b3J5X2ZvbnQtc3R5bGVcIik7XG4gICAgICAkc3RvcnkuZmluZChcImRpdlwiKS5hZGRDbGFzcyhcInN0b3J5X2ZvbnQtc3R5bGVcIik7XG4gICAgICAkc3RvcnkuZmluZChcInNwYW5cIikuYWRkQ2xhc3MoXCJzdG9yeV9mb250LXN0eWxlXCIpO1xuICAgIH1cblxuICAgIGNsb25lID0gJChkb2N1bWVudC5pbXBvcnROb2RlKCRjb250ZW50WzBdLCB0cnVlKSk7XG5cbiAgICByZXR1cm4gY2xvbmU7XG4gIH1cblxuICAvLyBGYWRlIG91dCBhbmQgY2xlYXIgY29udGVudC5cbiAgZnVuY3Rpb24gX2NsZWFyKGNiKSB7XG4gICAgaWYgKF90cmFuc2l0aW9uLnR5cGUgPT09IFwiZmFkZVwiKSB7XG4gICAgICAkKFwiLml0ZW1cIikub25lKFwidHJhbnNpdGlvbmVuZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgX2NsZWFyUGFnZShjYik7XG4gICAgICB9KTtcblxuICAgICAgJChcIi5pdGVtXCIpLmFkZENsYXNzKFwiZmFkZS1vdXRcIikucmVtb3ZlQ2xhc3MoXCJmYWRlLWluXCIpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIF9jbGVhclBhZ2UoY2IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGVhclBhZ2UoY2IpIHtcbiAgICBfJGVsLnBhZ2UuZW1wdHkoKTtcbiAgICBpZiAoIWNiIHx8IHR5cGVvZiBjYiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfc2hvd0l0ZW0oaW5kZXgpIHtcbiAgICBfJGVsLnBhZ2UuYXBwZW5kKF9nZXRUZW1wbGF0ZShfaXRlbXNbaW5kZXhdKSk7XG5cbiAgICAkKFwiLml0ZW1cIikuaGVpZ2h0KF9nZXRJdGVtSGVpZ2h0KCkpO1xuXG4gICAgaWYgKF90cmFuc2l0aW9uLnR5cGUgPT09IFwiZmFkZVwiKSB7XG4gICAgICAkKFwiLml0ZW1cIikuYWRkQ2xhc3MoXCJmYWRlLWluXCIpO1xuICAgIH1cblxuICAgICQoXCIuaXRlbVwiKS5yZW1vdmVDbGFzcyhcImhpZGVcIik7XG5cbiAgICAvLyB0cnVuY2F0ZSBjb250ZW50XG4gICAgJChcIi5pdGVtXCIpLmRvdGRvdGRvdCh7XG4gICAgICBoZWlnaHQ6IF9nZXRJdGVtSGVpZ2h0KClcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9tYWtlVHJhbnNpdGlvbigpIHtcbiAgICB2YXIgc3RhcnRDb25maWcgPSBfZ2V0U3RhcnRDb25maWcoKSxcbiAgICAgIHRyYW5zQ29uZmlnID0gX2dldFRyYW5zaXRpb25Db25maWcoX2N1cnJlbnRJdGVtSW5kZXgpLFxuICAgICAgc3RhcnRpbmdJbmRleCwgaXRlbXNUb1Nob3c7XG5cbiAgICBpZiAoX2N1cnJlbnRJdGVtSW5kZXggPT09IChfaXRlbXMubGVuZ3RoIC0gMSkpIHtcblxuICAgICAgX3N0b3BUcmFuc2l0aW9uVGltZXIoKTtcblxuICAgICAgX2NsZWFyKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8vIHNob3cgdGhlIGl0ZW1zXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhcnRDb25maWcuaXRlbXNUb1Nob3c7IGkgKz0gMSkge1xuICAgICAgICAgIF9zaG93SXRlbShpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jdXJyZW50SXRlbUluZGV4ID0gc3RhcnRDb25maWcuY3VycmVudEl0ZW1JbmRleDtcblxuICAgICAgICBSaXNlVmlzaW9uLlJTUy5vbkNvbnRlbnREb25lKCk7XG4gICAgICB9KTtcblxuICAgICAgX3dhaXRpbmdGb3JVcGRhdGUgPSBmYWxzZTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChfd2FpdGluZ0ZvclVwZGF0ZSkge1xuICAgICAgLy8gc3RhcnQgb3ZlciBhdCBmaXJzdCBpdGVtIHNpbmNlIHRoZSBmZWVkIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICAgIHN0YXJ0aW5nSW5kZXggPSAwO1xuXG4gICAgICBfd2FpdGluZ0ZvclVwZGF0ZSA9IGZhbHNlO1xuXG4gICAgICAvLyBhcHBseSBjb25maWcgdmFsdWVzIGZyb20gYSByZXN0YXJ0XG4gICAgICBpdGVtc1RvU2hvdyA9IHN0YXJ0Q29uZmlnLml0ZW1zVG9TaG93O1xuICAgICAgX2N1cnJlbnRJdGVtSW5kZXggPSBzdGFydENvbmZpZy5jdXJyZW50SXRlbUluZGV4O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHN0YXJ0aW5nSW5kZXggPSBfY3VycmVudEl0ZW1JbmRleCArIDE7XG5cbiAgICAgIC8vIGFwcGx5IGNvbmZpZyB2YWx1ZXMgZnJvbSBhIHRyYW5zaXRpb25cbiAgICAgIGl0ZW1zVG9TaG93ID0gdHJhbnNDb25maWcuaXRlbXNUb1Nob3c7XG4gICAgICBfY3VycmVudEl0ZW1JbmRleCA9IHRyYW5zQ29uZmlnLmN1cnJlbnRJdGVtSW5kZXg7XG4gICAgfVxuXG4gICAgX2NsZWFyKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIGkgPSBzdGFydGluZ0luZGV4OyBpIDwgKHN0YXJ0aW5nSW5kZXggKyBpdGVtc1RvU2hvdyk7IGkgKz0gMSkge1xuICAgICAgICBfc2hvd0l0ZW0oaSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhcnRUcmFuc2l0aW9uVGltZXIoKSB7XG4gICAgaWYgKF90cmFuc2l0aW9uSW50ZXJ2YWxJZCA9PT0gbnVsbCkge1xuICAgICAgX3RyYW5zaXRpb25JbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBfbWFrZVRyYW5zaXRpb24oKTtcbiAgICAgIH0sIF90cmFuc2l0aW9uLmR1cmF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfc3RvcFRyYW5zaXRpb25UaW1lcigpIHtcbiAgICBjbGVhckludGVydmFsKF90cmFuc2l0aW9uSW50ZXJ2YWxJZCk7XG4gICAgX3RyYW5zaXRpb25JbnRlcnZhbElkID0gbnVsbDtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaW5pdChmZWVkKSB7XG4gICAgdmFyIHN0YXJ0Q29uZmlnO1xuXG4gICAgX2l0ZW1zID0gZmVlZC5pdGVtcztcblxuICAgIGlmKHBhcmFtcy50cmFuc2l0aW9uKXtcbiAgICAgIF90cmFuc2l0aW9uID0gcGFyYW1zLnRyYW5zaXRpb247XG4gICAgfVxuXG4gICAgc3RhcnRDb25maWcgPSBfZ2V0U3RhcnRDb25maWcoKTtcblxuICAgIF9jdXJyZW50SXRlbUluZGV4ID0gc3RhcnRDb25maWcuY3VycmVudEl0ZW1JbmRleDtcblxuICAgIC8vIHNob3cgdGhlIGl0ZW1zXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFydENvbmZpZy5pdGVtc1RvU2hvdzsgaSArPSAxKSB7XG4gICAgICBfc2hvd0l0ZW0oaSk7XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICBfc3RvcFRyYW5zaXRpb25UaW1lcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgX3N0b3BUcmFuc2l0aW9uVGltZXIoKTtcbiAgICBfY2xlYXIoKTtcbiAgICBfaXRlbXMgPSBbXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgX3N0YXJ0VHJhbnNpdGlvblRpbWVyKCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoZmVlZCkge1xuICAgIF9pdGVtcyA9IGZlZWQuaXRlbXM7XG4gICAgX3dhaXRpbmdGb3JVcGRhdGUgPSB0cnVlO1xuICB9XG5cbiAgX2NhY2hlKCk7XG5cbiAgcmV0dXJuIHtcbiAgICBpbml0OiBpbml0LFxuICAgIHBhdXNlOiBwYXVzZSxcbiAgICBwbGF5OiBwbGF5LFxuICAgIHJlc2V0OiByZXNldCxcbiAgICB1cGRhdGU6IHVwZGF0ZVxuICB9O1xufTtcblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uTWVzc2FnZSA9IGZ1bmN0aW9uIChtYWluQ29udGFpbmVyLCBtZXNzYWdlQ29udGFpbmVyKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfYWN0aXZlID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gX2luaXQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIG1lc3NhZ2VDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gbWFpbkNvbnRhaW5lci5zdHlsZS5oZWlnaHQ7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS53YXJuKFwiQ2FuJ3QgaW5pdGlhbGl6ZSBNZXNzYWdlIC0gXCIsIGUubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBoaWRlKCkge1xuICAgIGlmIChfYWN0aXZlKSB7XG4gICAgICAvLyBjbGVhciBjb250ZW50IG9mIG1lc3NhZ2UgY29udGFpbmVyXG4gICAgICB3aGlsZSAobWVzc2FnZUNvbnRhaW5lci5maXJzdENoaWxkKSB7XG4gICAgICAgIG1lc3NhZ2VDb250YWluZXIucmVtb3ZlQ2hpbGQobWVzc2FnZUNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgIH1cblxuICAgICAgLy8gaGlkZSBtZXNzYWdlIGNvbnRhaW5lclxuICAgICAgbWVzc2FnZUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICAgIC8vIHNob3cgbWFpbiBjb250YWluZXJcbiAgICAgIG1haW5Db250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuXG4gICAgICBfYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2hvdyhtZXNzYWdlKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgcDtcblxuICAgIGlmICghX2FjdGl2ZSkge1xuICAgICAgLy8gaGlkZSBtYWluIGNvbnRhaW5lclxuICAgICAgbWFpbkNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcblxuICAgICAgbWVzc2FnZUNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG4gICAgICAvLyBjcmVhdGUgbWVzc2FnZSBlbGVtZW50XG4gICAgICBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICBwLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgICBwLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwibWVzc2FnZVwiKTtcblxuICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQocCk7XG4gICAgICBtZXNzYWdlQ29udGFpbmVyLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcblxuICAgICAgX2FjdGl2ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG1lc3NhZ2UgYWxyZWFkeSBiZWluZyBzaG93biwgdXBkYXRlIG1lc3NhZ2UgdGV4dFxuICAgICAgcCA9IG1lc3NhZ2VDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5tZXNzYWdlXCIpO1xuICAgICAgcC5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgIH1cbiAgfVxuXG4gIF9pbml0KCk7XG5cbiAgcmV0dXJuIHtcbiAgICBcImhpZGVcIjogaGlkZSxcbiAgICBcInNob3dcIjogc2hvd1xuICB9O1xufTtcblxuLyogZ2xvYmFsIGdhZGdldHMsIFJpc2VWaXNpb24gKi9cblxuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50LCBnYWRnZXRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBwcmVmcyA9IG5ldyBnYWRnZXRzLlByZWZzKCksXG4gICAgaWQgPSBwcmVmcy5nZXRTdHJpbmcoXCJpZFwiKTtcblxuICAvLyBEaXNhYmxlIGNvbnRleHQgbWVudSAocmlnaHQgY2xpY2sgbWVudSlcbiAgd2luZG93Lm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGRvY3VtZW50LmJvZHkub25tb3VzZWRvd24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgZnVuY3Rpb24gY29uZmlndXJlKG5hbWVzLCB2YWx1ZXMpIHtcbiAgICB2YXIgYWRkaXRpb25hbFBhcmFtcyxcbiAgICAgIGNvbXBhbnlJZCA9IFwiXCIsXG4gICAgICBkaXNwbGF5SWQgPSBcIlwiO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmFtZXMpICYmIG5hbWVzLmxlbmd0aCA+IDAgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZXMpICYmIHZhbHVlcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAobmFtZXNbMF0gPT09IFwiY29tcGFueUlkXCIpIHtcbiAgICAgICAgY29tcGFueUlkID0gdmFsdWVzWzBdO1xuICAgICAgfVxuXG4gICAgICBpZiAobmFtZXNbMV0gPT09IFwiZGlzcGxheUlkXCIpIHtcbiAgICAgICAgaWYgKHZhbHVlc1sxXSkge1xuICAgICAgICAgIGRpc3BsYXlJZCA9IHZhbHVlc1sxXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkaXNwbGF5SWQgPSBcInByZXZpZXdcIjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXJVdGlscy5zZXRJZHMoY29tcGFueUlkLCBkaXNwbGF5SWQpO1xuXG4gICAgICBpZiAobmFtZXNbMl0gPT09IFwiYWRkaXRpb25hbFBhcmFtc1wiKSB7XG4gICAgICAgIGFkZGl0aW9uYWxQYXJhbXMgPSBKU09OLnBhcnNlKHZhbHVlc1syXSk7XG5cbiAgICAgICAgUmlzZVZpc2lvbi5SU1Muc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIFJpc2VWaXNpb24uUlNTLnBsYXkoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIFJpc2VWaXNpb24uUlNTLnBhdXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIFJpc2VWaXNpb24uUlNTLnN0b3AoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdlYkNvbXBvbmVudHNSZWFkeSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIldlYkNvbXBvbmVudHNSZWFkeVwiLCB3ZWJDb21wb25lbnRzUmVhZHkpO1xuXG4gICAgaWYgKGlkICYmIGlkICE9PSBcIlwiKSB7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BsYXlfXCIgKyBpZCwgcGxheSk7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BhdXNlX1wiICsgaWQsIHBhdXNlKTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNjbWRfc3RvcF9cIiArIGlkLCBzdG9wKTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNwYXJhbV9zZXRfXCIgKyBpZCwgY29uZmlndXJlKTtcbiAgICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc3BhcmFtX2dldFwiLCBudWxsLCBpZCwgW1wiY29tcGFueUlkXCIsIFwiZGlzcGxheUlkXCIsIFwiYWRkaXRpb25hbFBhcmFtc1wiXSk7XG4gICAgfVxuICB9XG5cbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJXZWJDb21wb25lbnRzUmVhZHlcIiwgd2ViQ29tcG9uZW50c1JlYWR5KTtcblxuXG59KSh3aW5kb3csIGRvY3VtZW50LCBnYWRnZXRzKTtcblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
