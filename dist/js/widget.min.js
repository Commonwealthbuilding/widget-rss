!function(e,t){function n(e,t,n){var i=e.children(),o=!1;e.empty();for(var s=0,a=i.length;a>s;s++){var l=i.eq(s);if(e.append(l),n&&e.append(n),r(e,t)){l.remove(),o=!0;break}n&&n.detach()}return o}function i(t,n,s,a,l){var d=!1,u="a, table, thead, tbody, tfoot, tr, col, colgroup, object, embed, param, ol, ul, dl, blockquote, select, optgroup, option, textarea, script, style",c="script, .dotdotdot-keep";return t.contents().detach().each(function(){var f=this,h=e(f);if("undefined"==typeof f)return!0;if(h.is(c))t.append(h);else{if(d)return!0;t.append(h),!l||h.is(a.after)||h.find(a.after).length||t[t.is(u)?"after":"append"](l),r(s,a)&&(d=3==f.nodeType?o(h,n,s,a,l):i(h,n,s,a,l),d||(h.detach(),d=!0)),d||l&&l.detach()}}),n.addClass("is-truncated"),d}function o(t,n,i,o,a){var u=t[0];if(!u)return!1;var f=d(u),h=-1!==f.indexOf(" ")?" ":"　",g="letter"==o.wrap?"":h,p=f.split(g),m=-1,v=-1,S=0,y=p.length-1;for(o.fallbackToLetter&&0==S&&0==y&&(g="",p=f.split(g),y=p.length-1);y>=S&&(0!=S||0!=y);){var R=Math.floor((S+y)/2);if(R==v)break;v=R,l(u,p.slice(0,v+1).join(g)+o.ellipsis),i.children().each(function(){e(this).toggle().toggle()}),r(i,o)?(y=v,o.fallbackToLetter&&0==S&&0==y&&(g="",p=p[0].split(g),m=-1,v=-1,S=0,y=p.length-1)):(m=v,S=v)}if(-1==m||1==p.length&&0==p[0].length){var w=t.parent();t.detach();var C=a&&a.closest(w).length?a.length:0;w.contents().length>C?u=c(w.contents().eq(-1-C),n):(u=c(w,n,!0),C||w.detach()),u&&(f=s(d(u),o),l(u,f),C&&a&&e(u).parent().append(a))}else f=s(p.slice(0,m+1).join(g),o),l(u,f);return!0}function r(e,t){return e.innerHeight()>t.maxHeight}function s(t,n){for(;e.inArray(t.slice(-1),n.lastCharacter.remove)>-1;)t=t.slice(0,-1);return e.inArray(t.slice(-1),n.lastCharacter.noEllipsis)<0&&(t+=n.ellipsis),t}function a(e){return{width:e.innerWidth(),height:e.innerHeight()}}function l(e,t){e.innerText?e.innerText=t:e.nodeValue?e.nodeValue=t:e.textContent&&(e.textContent=t)}function d(e){return e.innerText?e.innerText:e.nodeValue?e.nodeValue:e.textContent?e.textContent:""}function u(e){do e=e.previousSibling;while(e&&1!==e.nodeType&&3!==e.nodeType);return e}function c(t,n,i){var o,r=t&&t[0];if(r){if(!i){if(3===r.nodeType)return r;if(e.trim(t.text()))return c(t.contents().last(),n)}for(o=u(r);!o;){if(t=t.parent(),t.is(n)||!t.length)return!1;o=u(t[0])}if(o)return c(e(o),n)}return!1}function f(t,n){return t?"string"==typeof t?(t=e(t,n),t.length?t:!1):t.jquery?t:!1:!1}function h(e){for(var t=e.innerHeight(),n=["paddingTop","paddingBottom"],i=0,o=n.length;o>i;i++){var r=parseInt(e.css(n[i]),10);isNaN(r)&&(r=0),t-=r}return t}if(!e.fn.dotdotdot){e.fn.dotdotdot=function(t){if(0==this.length)return e.fn.dotdotdot.debug('No element found for "'+this.selector+'".'),this;if(this.length>1)return this.each(function(){e(this).dotdotdot(t)});var o=this;o.data("dotdotdot")&&o.trigger("destroy.dot"),o.data("dotdotdot-style",o.attr("style")||""),o.css("word-wrap","break-word"),"nowrap"===o.css("white-space")&&o.css("white-space","normal"),o.bind_events=function(){return o.bind("update.dot",function(t,a){switch(o.removeClass("is-truncated"),t.preventDefault(),t.stopPropagation(),typeof l.height){case"number":l.maxHeight=l.height;break;case"function":l.maxHeight=l.height.call(o[0]);break;default:l.maxHeight=h(o)}l.maxHeight+=l.tolerance,"undefined"!=typeof a&&(("string"==typeof a||"nodeType"in a&&1===a.nodeType)&&(a=e("<div />").append(a).contents()),a instanceof e&&(s=a)),p=o.wrapInner('<div class="dotdotdot" />').children(),p.contents().detach().end().append(s.clone(!0)).find("br").replaceWith("  <br />  ").end().css({height:"auto",width:"auto",border:"none",padding:0,margin:0});var u=!1,c=!1;return d.afterElement&&(u=d.afterElement.clone(!0),u.show(),d.afterElement.detach()),r(p,l)&&(c="children"==l.wrap?n(p,l,u):i(p,o,p,l,u)),p.replaceWith(p.contents()),p=null,e.isFunction(l.callback)&&l.callback.call(o[0],c,s),d.isTruncated=c,c}).bind("isTruncated.dot",function(e,t){return e.preventDefault(),e.stopPropagation(),"function"==typeof t&&t.call(o[0],d.isTruncated),d.isTruncated}).bind("originalContent.dot",function(e,t){return e.preventDefault(),e.stopPropagation(),"function"==typeof t&&t.call(o[0],s),s}).bind("destroy.dot",function(e){e.preventDefault(),e.stopPropagation(),o.unwatch().unbind_events().contents().detach().end().append(s).attr("style",o.data("dotdotdot-style")||"").data("dotdotdot",!1)}),o},o.unbind_events=function(){return o.unbind(".dot"),o},o.watch=function(){if(o.unwatch(),"window"==l.watch){var t=e(window),n=t.width(),i=t.height();t.bind("resize.dot"+d.dotId,function(){n==t.width()&&i==t.height()&&l.windowResizeFix||(n=t.width(),i=t.height(),c&&clearInterval(c),c=setTimeout(function(){o.trigger("update.dot")},100))})}else u=a(o),c=setInterval(function(){if(o.is(":visible")){var e=a(o);(u.width!=e.width||u.height!=e.height)&&(o.trigger("update.dot"),u=e)}},500);return o},o.unwatch=function(){return e(window).unbind("resize.dot"+d.dotId),c&&clearInterval(c),o};var s=o.contents(),l=e.extend(!0,{},e.fn.dotdotdot.defaults,t),d={},u={},c=null,p=null;return l.lastCharacter.remove instanceof Array||(l.lastCharacter.remove=e.fn.dotdotdot.defaultArrays.lastCharacter.remove),l.lastCharacter.noEllipsis instanceof Array||(l.lastCharacter.noEllipsis=e.fn.dotdotdot.defaultArrays.lastCharacter.noEllipsis),d.afterElement=f(l.after,o),d.isTruncated=!1,d.dotId=g++,o.data("dotdotdot",!0).bind_events().trigger("update.dot"),l.watch&&o.watch(),o},e.fn.dotdotdot.defaults={ellipsis:"... ",wrap:"word",fallbackToLetter:!0,lastCharacter:{},tolerance:0,callback:null,after:null,height:null,watch:!1,windowResizeFix:!0},e.fn.dotdotdot.defaultArrays={lastCharacter:{remove:[" ","　",",",";",".","!","?"],noEllipsis:[]}},e.fn.dotdotdot.debug=function(){};var g=1,p=e.fn.html;e.fn.html=function(n){return n!=t&&!e.isFunction(n)&&this.data("dotdotdot")?this.trigger("update",[n]):p.apply(this,arguments)};var m=e.fn.text;e.fn.text=function(n){return n!=t&&!e.isFunction(n)&&this.data("dotdotdot")?(n=e("<div />").text(n).html(),this.trigger("update",[n])):m.apply(this,arguments)}}}(jQuery);var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,t){var n="font-family:"+t.font.family+"; ",i="color: "+(t.color?t.color:t.forecolor)+"; ",o="font-size: "+(-1===t.size.indexOf("px")?t.size+"px; ":t.size+"; "),r="font-weight: "+(t.bold?"bold":"normal")+"; ",s="font-style: "+(t.italic?"italic":"normal")+"; ",a="text-decoration: "+(t.underline?"underline":"none")+"; ",l="background-color: "+(t.highlightColor?t.highlightColor:t.backcolor)+"; ";return"."+e+" {"+n+i+o+r+s+a+l+"}"}function t(e){for(var t=document.createElement("style"),n=0,i=e.length;i>n;n++)t.appendChild(document.createTextNode(e[n]));document.head.appendChild(t)}function n(n,r){n.forEach(function(n){n.class&&n.fontSetting&&t([e(n.class,n.fontSetting)]),n.fontSetting.font.type&&("custom"===n.fontSetting.font.type&&n.fontSetting.font.family&&n.fontSetting.font.url?i(n.fontSetting.font.family,n.fontSetting.font.url,r):"google"===n.fontSetting.font.type&&n.fontSetting.font.family&&o(n.fontSetting.font.family,r))})}function i(e,t,n){var i=null,o="font-family: "+e+"; src: url('"+t+"');";n=n||document,i=n.styleSheets[0],null!==i&&i.addRule("@font-face",o)}function o(e,t){var n,i=document.createElement("link");t=t||document,i.setAttribute("rel","stylesheet"),i.setAttribute("type","text/css"),n=e.split(",")[0],n=n.replace(/'/g,""),i.setAttribute("href","https://fonts.googleapis.com/css?family="+n),null!==i&&t.getElementsByTagName("head")[0].appendChild(i)}function r(e){for(var t=e.length,n=[],i=0;t>i;i++)n[i]=new Image,n[i].src=e[i]}function s(e){for(var t,n=window.location.search.substring(1),i=n.split("&"),o=0;o<i.length;o++)if(t=i[o].split("="),t[0]==e)return decodeURIComponent(t[1]);return""}function a(e){var t="";switch(e){case 404:t="The file does not exist or cannot be accessed.";break;case 507:t="There is not enough disk space to save the file on Rise Cache.";break;default:t="There was a problem retrieving the file from Rise Cache."}return t}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:t,loadFonts:n,loadCustomFont:i,loadGoogleFont:o,preloadImages:r,getRiseCacheErrorMessage:a}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,t){var i=null;e.event?(i=e,i.file_url&&(i.file_format=n(i.file_url)),i.company_id=a,i.display_id=s,t(i)):t(i)}function t(){var e=new Date,t=e.getUTCFullYear(),n=e.getUTCMonth()+1,i=e.getUTCDate();return 10>n&&(n="0"+n),10>i&&(i="0"+i),t+n+i}function n(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function i(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:t(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(n));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function o(t,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(t,e)})}function r(e,t){a=e,s=t}var s="",a="";return{getInsertData:i,getFileFormat:n,logEvent:o,setIds:r}}(),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-d<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,o){function c(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",i),d=t.refreshedAt||d,u=t.token||u,n=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,u="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.RSS={},RiseVision.RSS=function(e,t){"use strict";function n(){t.rpc.call("","rsevent_ready",null,y.getString("id"),!0,!0,!0,!0,!0)}function i(){t.rpc.call("","rsevent_done",null,y.getString("id")),null!==E&&d(E,!0),d({event:"done",feed_url:S.url},!1)}function o(){var e={event:"error",event_details:"no feed items",feed_url:S.url};d(e,!0),m("There are no items to show from this RSS feed.")}function r(){clearTimeout(I),I=null}function s(){r(),I=setTimeout(function(){i()},5e3)}function a(){R=new RiseVision.Common.Message(e.getElementById("container"),e.getElementById("messageContainer")),R.show("Please wait while your feed is loaded.");var t=[{"class":"headline_font-style",fontSetting:S.headline.fontStyle},{"class":"story_font-style",fontSetting:S.story.fontStyle}];RiseVision.Common.Utilities.loadFonts(t),w=new RiseVision.RSS.RiseRSS(S),w.init(),n()}function l(){return"rss_events"}function d(e,t){t&&(E=e),RiseVision.Common.LoggerUtils.logEvent(l(),e)}function u(){i()}function c(e){console.log("onRiseRSSInit"),console.dir(e),C=new RiseVision.RSS.Content(y,S),e.items&&e.items.length>0?(R.hide(),T=_.clone(e),C.init(T),b||C.play()):o()}function f(e){console.log("onRiseRSSRefresh"),console.dir(e);var t=!1;if(e.items&&0!==e.items.length)if(T&&e.items.length===T.items.length){for(var n=0;n<T.items.length;n+=1)if(!_.isEqual(e.items[n],T.items[n])){t=!0;break}}else t=!0;else o();t&&(T=_.clone(e),V?(C||(C=new RiseVision.RSS.Content(y,S)),R.hide(),C.init(T),V=!1,E=null):C.update(e))}function h(){return b=!0,V?(r(),void 0):(C&&C.pause(),void 0)}function g(){return b=!1,d({event:"play",feed_url:S.url},!1),V?(s(),void 0):(C&&C.play(),void 0)}function p(n){S=JSON.parse(JSON.stringify(n)),y=new t.Prefs,S.width=y.getInt("rsW"),S.height=y.getInt("rsH"),e.getElementById("container").style.width=S.width+"px",e.getElementById("container").style.height=S.height+"px",a()}function m(e){V=!0,C.reset(),T=null,R.show(e),b||s()}function v(){h()}var S=null,y=new t.Prefs,R=null,w=null,C=null,T=null,b=!0,I=null,E=null,V=!1;return{getTableName:l,logEvent:d,onContentDone:u,onRiseRSSInit:c,onRiseRSSRefresh:f,pause:h,play:g,setAdditionalParams:p,showError:m,stop:v}}(document,gadgets);var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Utils=function(){"use strict";function e(e){var t,n,i=document.createElement("div");for(i.innerHTML=e,t=i.getElementsByTagName("script"),n=t.length;n--;)t[n].parentNode.removeChild(t[n]);return i.innerHTML}function t(e){var t=120;return e.length>t&&(e=e.substring(0,t),e=e.replace(/\w+$/,""),e+=" ..."),e}return{stripScripts:e,truncate:t}}();var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.RiseRSS=function(e){"use strict";function t(){var t=document.querySelector("rise-rss");t.addEventListener("rise-rss-response",function(e){e.detail&&e.detail.feed&&(n?(n=!1,RiseVision.RSS.onRiseRSSInit(e.detail.feed)):RiseVision.RSS.onRiseRSSRefresh(e.detail.feed))}),t.addEventListener("rise-rss-error",function(t){var n="";t.detail&&"string"==typeof t.detail?n=t.detail:t.detail&&Array.isArray(t.detail)&&t.detail.length>0&&(n=t.detail[0]);var i={event:"error",event_details:"rise rss error",error_details:n,feed_url:e.url};RiseVision.RSS.logEvent(i,!0),RiseVision.RSS.showError("Sorry, there was a problem with the RSS feed.",!0)}),t.setAttribute("url",e.url),e.itemsInQueue&&t.setAttribute("entries",e.itemsInQueue),t.go()}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Content=function(e,t){"use strict";function n(){y={page:$(".page")}}function i(){var n=R.length<=t.itemsToShow?R.length:t.itemsToShow;return e.getInt("rsH")/n}function o(e){var n={};return e+t.itemsToShow>=R.length-1?(n.itemsToShow=R.length-(e+1),n.currentItemIndex=R.length-1):(n.itemsToShow=t.itemsToShow,n.currentItemIndex=e+t.itemsToShow),n}function r(){var e={};return R.length<=t.itemsToShow?(e.itemsToShow=R.length,e.currentItemIndex=R.length-1):(e.itemsToShow=t.itemsToShow,e.currentItemIndex=t.itemsToShow-1),e}function s(e){var t=null;return _.has(e,"content:encoded")?t=e["content:encoded"]:_.has(e,"description")&&(t=e.description),t}function a(e){var n,i,o=s(e),r=document.querySelector("#rssItem").content,a=$(r.cloneNode(!0));return e.title?(a.find(".headline").css("textAlign",t.headline.fontStyle.align),a.find(".headline a").text(e.title)):a.remove(".headline"),o?(n=a.find(".story"),n.css("textAlign",t.story.fontStyle.align),o=w.stripScripts(o),"snippet"===t.dataSelection.showDescription?n.html(w.truncate($("<div/>").html(o).text())):n.html(o),n.find("p").addClass("story_font-style"),n.find("div").addClass("story_font-style"),n.find("span").addClass("story_font-style")):a.remove(".story"),i=$(document.importNode(a[0],!0))}function l(e){"fade"===b.type?($(".item").one("transitionend",function(){d(e)}),$(".item").addClass("fade-out").removeClass("fade-in")):d(e)}function d(e){y.page.empty(),e&&"function"==typeof e&&e()}function u(e){y.page.append(a(R[e])),$(".item").height(i()),"fade"===b.type&&$(".item").addClass("fade-in"),$(".item").removeClass("hide"),$(".item").dotdotdot({height:i()})}function c(){var e,t,n=r(),i=o(C);return C===R.length-1?(h(),l(function(){for(var e=0;e<n.itemsToShow;e+=1)u(e);C=n.currentItemIndex,RiseVision.RSS.onContentDone()}),I=!1,void 0):(I?(e=0,I=!1,t=n.itemsToShow,C=n.currentItemIndex):(e=C+1,t=i.itemsToShow,C=i.currentItemIndex),l(function(){for(var n=e;e+t>n;n+=1)u(n)}),void 0)}function f(){null===T&&(T=setInterval(function(){c()},b.duration))}function h(){clearInterval(T),T=null}function g(e){var n;R=e.items,t.transition&&(b=t.transition),n=r(),C=n.currentItemIndex;for(var i=0;i<n.itemsToShow;i+=1)u(i)}function p(){h()}function m(){h(),l(),R=[]}function v(){f()}function S(e){R=e.items,I=!0}var y,R=[],w=RiseVision.RSS.Utils,C=0,T=null,b={type:"none",duration:1e4},I=!1;return n(),{init:g,pause:p,play:v,reset:m,update:S}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(e,t,n){"use strict";function i(e,t){var n,i="",o="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(i=t[0]),"displayId"===e[1]&&(o=t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(i,o),"additionalParams"===e[2]&&(n=JSON.parse(t[2]),RiseVision.RSS.setAdditionalParams(n)))}function o(){RiseVision.RSS.play()}function r(){RiseVision.RSS.pause()}function s(){RiseVision.RSS.stop()}function a(){e.removeEventListener("WebComponentsReady",a),d&&""!==d&&(n.rpc.register("rscmd_play_"+d,o),n.rpc.register("rscmd_pause_"+d,r),n.rpc.register("rscmd_stop_"+d,s),n.rpc.register("rsparam_set_"+d,i),n.rpc.call("","rsparam_get",null,d,["companyId","displayId","additionalParams"]))}var l=new n.Prefs,d=l.getString("id");e.oncontextmenu=function(){return!1},t.body.onmousedown=function(){return!1},e.addEventListener("WebComponentsReady",a)}(window,document,gadgets);
//# sourceMappingURL=data:application/json;base64,
