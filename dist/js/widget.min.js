if("undefined"==typeof config){var config={};"undefined"!=typeof angular&&(angular.module("risevision.widget.rss.config",[]).value("layout4x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-4x1.html").value("layout2x1","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-2x1.html").value("layout1x2","https://s3.amazonaws.com/widget-rss/1.0.0/dist/layout-1x2.html"),angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json"))}var RiseVision=RiseVision||{};RiseVision.RSS={},RiseVision.RSS=function(n){"use strict";function e(){n.rpc.call("","rsevent_ready",null,d.getString("id"),!0,!0,!0,!0,!1)}function i(n){console.dir(n),e()}function s(n){console.dir(n)}function t(){}function o(){}function r(e,i){Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(i)&&i.length>0&&(l=JSON.parse(i[0]),d=new n.Prefs,document.getElementById("rssContainer").style.height=d.getInt("rsH")+"px",u=new RiseVision.RSS.Component(l),u.init())}function a(){}var l,d=null,u=null;return{onComponentInit:i,onComponentRefresh:s,pause:t,play:o,setAdditionalParams:r,stop:a}}(gadgets);var RiseVision=RiseVision||{};RiseVision.RSS=RiseVision.RSS||{},RiseVision.RSS.Component=function(n){"use strict";function e(){var e=document.getElementById("rss");e&&(e.addEventListener("rise-rss-response",function(n){console.log("rise-rss-response handler"),n.detail&&n.detail.feed&&(i?(i=!1,RiseVision.RSS.onComponentInit(n.detail.feed)):RiseVision.RSS.onComponentRefresh(n.detail.feed))}),e.addEventListener("rise-rss-error",function(n){console.log("rise-rss-error handler"),n.detail&&console.log(n.detail)}),e.setAttribute("url",n.url),e.go())}var i=!0;return{init:e}},function(n,e){"use strict";function i(){}function s(){}function t(){}function o(){n.removeEventListener("WebComponentsReady",o),a&&""!==a&&(e.rpc.register("rscmd_play_"+a,i),e.rpc.register("rscmd_pause_"+a,s),e.rpc.register("rscmd_stop_"+a,t),e.rpc.register("rsparam_set_"+a,RiseVision.RSS.setAdditionalParams),e.rpc.call("","rsparam_get",null,a,["additionalParams"]))}var r=new e.Prefs,a=r.getString("id");n.oncontextmenu=function(){return!1},n.addEventListener("WebComponentsReady",o)}(window,gadgets);
//# sourceMappingURL=data:application/json;base64,